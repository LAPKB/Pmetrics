%!PS-Adobe-3.0
%%BoundingBox: 24 24 571 818
%%Title: Enscript Output
%%For: Walter Mas Yamada
%%Creator: GNU Enscript 1.6.6
%%CreationDate: Wed Apr 18 16:37:53 2018
%%Orientation: Portrait
%%Pages: (atend)
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6 6
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6 6
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 10 10 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [595 842] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-simple 1.6 6

/do_header {	% print default simple header
  gsave
    d_header_x d_header_y HFpt_h 3 div add translate

    HF setfont
    user_header_p {
      5 0 moveto user_header_left_str show

      d_header_w user_header_center_str stringwidth pop sub 2 div
      0 moveto user_header_center_str show

      d_header_w user_header_right_str stringwidth pop sub 5 sub
      0 moveto user_header_right_str show
    } {
      5 0 moveto fname show
      45 0 rmoveto fmodstr show
      45 0 rmoveto pagenumstr show
    } ifelse

  grestore
} def
%%EndResource
/d_page_w 547 def
/d_page_h 794 def
/d_header_x 0 def
/d_header_y 779 def
/d_header_w 547 def
/d_header_h 15 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 547 def
/d_footer_h 0 def
/d_output_w 547 def
/d_output_h 779 def
/cols 1 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
24 24 translate
/pagenum 1 def
/fname (PoissonStrategyCode.txt) def
/fdir (.) def
/ftail (PoissonStrategyCode.txt) def
% User defined strings:
/fmodstr (Wed Apr 18 16:35:58 2018) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 755 M
(C --------------------- npagranfix6_b10.f) s
5 744 M
(!) s
5 733 M
(! main inspects the error polynomial for indication that measure is a) s
5 722 M
(! Poisson r.v. If Poisson, IPAR\(110+J\) is set and ObsError\(J,\)=1.D0.) s
5 711 M
(! ObsError will be calculated in idm1x*.f::SUBROUTINE FUNC\(\)) s
5 700 M
(! 4110             PYJGX\(JSUB,IG\) = RPAR\(129\) ! Poisson component) s
5 689 M
(! 4111      1 * DEXP\(-.5D0*RPAR\(128\)\)/RPAR\(126\)/RPAR\(127\) ! Normal component) s
5 678 M
(!) s
5 656 M
( 2396       SUBROUTINE NPAG\(MAXSUB,MAXGRD,MAXDIM,MAXACT,) s
5 645 M
( 2397      1  NUMEQT,MAXOBS,WORK,WORKK,SPXGYJ,DXI,PYJGX,PYJGXX,) s
5 634 M
( 2398      2  DENSTOR,EXX,CORDEN,CORHOLD,YPREDPOP,YPREDPOPT,YPREDBAY,CORDLAST\)) s
5 612 M
( 2494 C wmy2018Apr17 \(Tax Day\) DO 140 Variables) s
5 601 M
( 2495        integer MISVAL, NNORMALOBS,NPOISSONOBS) s
5 590 M
( 2496        real*8  SIGFAC, OFAC) s
5 568 M
( 2830         gamma = 1.d0) s
5 557 M
( 2831         flat = 1.d0) s
5 546 M
( 2832         if\(ierrmod .eq. 2\) gamma = gamlam0) s
5 535 M
( 2833         if\(ierrmod .eq. 3\) gamma = gamlam0) s
5 524 M
( 2834         if\(ierrmod .eq. 4\) flat = gamlam0) s
5 513 M
( 2835 ) s
5 502 M
( 2836           RPAR\(96\) = gamma) s
5 491 M
( 2837           RPAR\(97\) = flat) s
5 480 M
( 2838 ) s
5 469 M
( 2839         igamma = 0) s
5 458 M
( 2840         gamdel=0.1) s
5 447 M
( 2841         if\(ierrmod.eq.1\) gamdel=0.d0) s
5 425 M
( 3518 cgam3) s
5 414 M
( 3519 10001 continue) s
5 392 M
( 3585       DO 1000 JSUB=1,NSUB) s
5 370 M
( 3604         CALL FILRED\(NOBSER,YO,C0,C1,C2,C3,NUMEQT,RSCOPY,BSCOPY,) s
5 359 M
( 3605      1    INTLIST\)) s
5 337 M
( 3611         RPAR\(96\) = gamma) s
5 326 M
( 3612 ) s
5 315 M
( 3613 C C0 -> RPAR\(98,99,100,101,102,103,104\)) s
5 304 M
( 3614 C C1 -> RPAR\(105:111\)) s
5 293 M
( 3615 C C2 -> RPAR\(112:118\)) s
5 282 M
( 3616 C C3 -> RPAR\(119:125\)) s
5 271 M
( 3617         do III=1,7) s
5 260 M
( 3618            RPAR\(97 + III\) = C0\(III\)) s
5 249 M
( 3619            RPAR\(104 + III\) = C1\(III\)) s
5 238 M
( 3620            RPAR\(111 + III\) = C2\(III\)) s
5 227 M
( 3621            RPAR\(118 + III\) = C3\(III\)) s
5 216 M
( 3622         end do) s
5 194 M
( 3664         MISVAL = 0) s
5 183 M
( 3665         NNORMALOBS = 0) s
5 172 M
( 3666         NPOISSONOBS = 0) s
5 161 M
( 3667         SIGFAC=1.D0) s
5 150 M
( 3668         OFAC=0.D0) s
5 139 M
( 3669 ) s
5 128 M
( 3670         DO 140 I=1,NOBSER) s
5 117 M
( 3671          DO 140 J=1,NUMEQT) s
5 106 M
( 3672 ) s
5 95 M
( 3673           Y = YO\(I,J\)) s
5 84 M
( 3674 ) s
5 73 M
( 3675 C  IF Y = -99, IT MEANS THAT OUTPUT EQ. J HAD NO VALUE AT OBSERVATION) s
5 62 M
( 3676 C  TIME I. IN THIS CASE, IGNORE THIS Y AND INCREASE MISVAL BY 1.) s
5 51 M
( 3677 ) s
5 40 M
( 3678 ) s
5 29 M
( 3679           IF\(Y .EQ. -99\) THEN) s
5 18 M
( 3680            MISVAL = MISVAL+1) s
5 7 M
( 3681            GO TO 140) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
24 24 translate
/pagenum 2 def
/fname (PoissonStrategyCode.txt) def
/fdir (.) def
/ftail (PoissonStrategyCode.txt) def
% User defined strings:
/fmodstr (Wed Apr 18 16:35:58 2018) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 766 M
( 3682           ENDIF) s
5 755 M
( 3683 ) s
5 744 M
( 3684           if \(C0\(J\).eq.-299.and.C2\(J\).eq.-299) s
5 733 M
( 3685      1   .and.C3\(J\).eq.-299\) then) s
5 722 M
( 3686 C--------------------------------- Start Poisson) s
5 711 M
( 3687 ) s
5 700 M
( 3688              write \(*,*\) "Poisson analysis req. for OUTEQ",J) s
5 689 M
( 3689              NPOISSONOBS=NPOISSONOBS+1) s
5 678 M
( 3690              ObsError\(I,J\)=1.D0) s
5 667 M
( 3691              SIG\(I,J\)=1.D0) s
5 656 M
( 3692       ) s
5 645 M
( 3693 C--------------------------------- End Poisson) s
5 634 M
( 3694           else) s
5 623 M
( 3695 C--------------------------------- Start NORMAL) s
5 612 M
( 3696 ) s
5 601 M
( 3697 C  NOTE: FOR EACH SUBJECT, MUST ENSURE THAT ALL THE STD DEV'S ARE NON-) s
5 590 M
( 3698 C        ZERO. OTHERWISE, THE PROGRAM WILL BLOW UP! THIS IS BECAUSE) s
5 579 M
( 3699 C        P\(YJ|X\) INVOLVES SQUARED DIFFERNCES BETWEEN OBSERVED Y'S AND) s
5 568 M
( 3700 C        EXPECTED Y'S \(FOR EACH X GRID POINT\)...EACH DIFFERENCE) s
5 557 M
( 3701 C        NORMALIZED \(I.E., DIVIDED\) BY THE VARIANCE OF THE RESPECTED) s
5 546 M
( 3702 C        OBSERSATION.) s
5 535 M
( 3703 ) s
5 524 M
( 3704 C        SEE M2_17CAL.F CODE FOR COMMENTS ON HOW A STD. DEV. COULD = 0.) s
5 513 M
( 3705 ) s
5 502 M
( 3706 C  ALSO TEST TO MAKE SURE NO STD. DEV. < 0, SINCE SIGFAC BEING NEGATIVE) s
5 491 M
( 3707 C  WOULD RESULT IN A NEGATIVE PROBABILITY \(SEE PYJGX CALCULATION BELOW\).) s
5 480 M
( 3708 ) s
5 469 M
( 3709       SIG\(I,J\) = C0\(J\)+C1\(J\)*Y+C2\(J\)*Y*Y+C3\(J\)*Y**3) s
5 458 M
( 3710 cgam4) s
5 447 M
( 3711       if\(ierrmod.eq.2\) sig\(i,j\) = sig\(i,j\)*gamma) s
5 436 M
( 3712       if\(ierrmod.eq.3\) sig\(i,j\)=dsqrt\(sig\(i,j\)**2 + gamma**2\)) s
5 425 M
( 3713       if\(ierrmod.eq.4\) sig\(i,j\) = gamma*flat) s
5 414 M
( 3714 ) s
5 403 M
( 3715 ) s
5 392 M
( 3716       IF\(SIG\(I,J\) .EQ. 0\) THEN) s
5 381 M
( 3717                 WRITE\(*,2345\) JSUB) s
5 370 M
( 3718                 WRITE\(25,2345\) JSUB) s
5 359 M
( 3719 2345            FORMAT\(//' A S.D. IS 0 FOR JSUB = ',I5,'. RERUN THE '/) s
5 348 M
( 3720      1' PROGRAM WITH C0 NOT = 0  FOR THIS SUBJECT, OR WITH THIS'/) s
5 337 M
( 3721      2' SUBJECT ELIMINATED.'\)) s
5 326 M
( 3722                 CLOSE\(27\)) s
5 315 M
( 3723                 CLOSE\(25\)) s
5 304 M
( 3724 ) s
5 293 M
( 3725 C  SINCE THE PROGRAM IS TERMINATING ABNORMALLY, WRITE THE ERROR MESSAGE) s
5 282 M
( 3726 C  TO ERRFIL ALSO.) s
5 271 M
( 3727 ) s
5 260 M
( 3728         OPEN\(42,FILE=ERRFIL\)) s
5 249 M
( 3729          WRITE\(42,2345\) JSUB) s
5 238 M
( 3730         CLOSE\(42\)) s
5 227 M
( 3731 ) s
5 216 M
( 3732                 CALL PAUSE) s
5 205 M
( 3733         STOP) s
5 194 M
( 3734       ENDIF) s
5 183 M
( 3735 ) s
5 172 M
( 3736       IF\(SIG\(I,J\) .LT. 0\) THEN) s
5 161 M
( 3737                 WRITE\(*,2346\) JSUB) s
5 150 M
( 3738                 WRITE\(25,2346\) JSUB) s
5 139 M
( 3739 2346            FORMAT\(//' A S.D. < 0 FOR JSUB = ',I5,'. RERUN THE '/) s
5 128 M
( 3740      1' PROGRAM WITH A BETTER CHOICE FOR THE ASSAY ERROR POLYNOMIAL'/) s
5 117 M
( 3741      2' COEFFICIENTS.'\)) s
5 106 M
( 3742                 CLOSE\(27\)) s
5 95 M
( 3743                 CLOSE\(25\)) s
5 84 M
( 3744 ) s
5 73 M
( 3745 C  SINCE THE PROGRAM IS TERMINATING ABNORMALLY, WRITE THE ERROR MESSAGE) s
5 62 M
( 3746 C  TO ERRFIL ALSO.) s
5 51 M
( 3747 ) s
5 40 M
( 3748         OPEN\(42,FILE=ERRFIL\)) s
5 29 M
( 3749          WRITE\(42,2346\) JSUB) s
5 18 M
( 3750         CLOSE\(42\)) s
5 7 M
( 3751 ) s
_R
S
%%Page: (3) 3
%%BeginPageSetup
_S
24 24 translate
/pagenum 3 def
/fname (PoissonStrategyCode.txt) def
/fdir (.) def
/ftail (PoissonStrategyCode.txt) def
% User defined strings:
/fmodstr (Wed Apr 18 16:35:58 2018) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 766 M
( 3752                 CALL PAUSE) s
5 755 M
( 3753                 STOP) s
5 744 M
( 3754       ENDIF) s
5 733 M
( 3755 ) s
5 722 M
( 3756 ) s
5 711 M
( 3757 C wmy2017Dec28 SIG is in the un-named COMMON; This can cause issues) s
5 700 M
( 3758 c  inside the DO 800 loop; so I'm copying the stdev to ObsError) s
5 689 M
( 3759 c) s
5 678 M
( 3760       ObsError\(I,J\) = SIG\(I,J\)) s
5 667 M
( 3761 ) s
5 656 M
( 3762       SIGFAC=SIGFAC*SIG\(I,J\)) s
5 645 M
( 3763 ) s
5 634 M
( 3764 C--------------------------------- END NORMAL) s
5 623 M
( 3765        endif) s
5 612 M
( 3766 ) s
5 601 M
( 3767   140 CONTINUE) s
5 579 M
( 3775 C wmy -- eqns updated to include Poisson  measures; and note that) s
5 568 M
( 3776 C  there is no error checking on Poisson measures! But I think we) s
5 557 M
( 3777 C  can use C1\(J\) for that, so I left it out. Maybe this can be) s
5 546 M
( 3778 C  the allowable %difference between predicted and observed? else) s
5 535 M
( 3779 C  set IPAR\(100\) to 0.) s
5 524 M
( 3780 ) s
5 513 M
( 3781         OFAC=2.506628274631**\(NOBSER*NUMEQT - MISVAL - NPOISSONOBS\)) s
5 502 M
( 3782 ) s
5 491 M
( 3783         NOBTOT = NOBTOT + NOBSER*NUMEQT - MISVAL) s
5 480 M
( 3784 ) s
5 469 M
( 3785         RPAR\(126\) = SIGFAC) s
5 458 M
( 3786         RPAR\(127\) = OFAC) s
5 447 M
( 3787 ) s
5 436 M
( 3788 C  NOTE THAT 2.5066... = SQRT\(2*PI\).) s
5 414 M
( 3918         DO 800 IG=IterFirst,IterLast) s
5 392 M
( 4040           W = 0.0) s
5 381 M
( 4041 ) s
5 370 M
( 4042         CALL IDPC\(JSUB,IG,NPX,PCOPY,W,NOBSER,NUMEQT,) s
5 359 M
( 4043      1    NDIM,MF,RTOL,ATOL,RSCOPY,BSCOPY,INTLIST,IPAR,ObsError,RPAR\)) s
5 337 M
( 4093         if \(IPAR\(100\).eq.1\) then) s
5 326 M
( 4094 ) s
5 315 M
( 4095           IF\(IG .LE. MAXACT\) PYJGX\(JSUB,IG\)=0.D0) s
5 304 M
( 4096 ) s
5 293 M
( 4097           WORKK\(IG\) = 0.D0) s
5 282 M
( 4098 C) s
5 271 M
( 4099 C Old Code, Assumes all observations are ~ Normal) s
5 260 M
( 4100 C) s
5 249 M
( 4101           IF\(W .LE. 22708.D0\) THEN) s
5 238 M
( 4102            IF\(IG .LE. MAXACT\) PYJGX\(JSUB,IG\) = DEXP\(-.5D0*W\)/SIGFAC/OFAC) s
5 227 M
( 4103            WORKK\(IG\) = DEXP\(-.5D0*W\)/SIGFAC/OFAC) s
5 216 M
( 4104           ENDIF) s
5 205 M
( 4105 ) s
5 194 M
( 4106 C New Code, Assumes Mix of ~ Poisson and ~ Normal) s
5 183 M
( 4107 ) s
5 172 M
( 4108           IF\(RPAR\(128\) .LE. 22708.D0\) THEN) s
5 161 M
( 4109            IF\(IG .LE. MAXACT\) THEN) s
5 150 M
( 4110             PYJGX\(JSUB,IG\) = RPAR\(129\)) s
5 139 M
( 4111      1        * DEXP\(-.5D0*RPAR\(128\)\)/RPAR\(126\)/RPAR\(127\)) s
5 128 M
( 4112            ENDIF) s
5 117 M
( 4113            WORKK\(IG\) = RPAR\(129\)) s
5 106 M
( 4114      1        * DEXP\(-.5D0*RPAR\(128\)\)/RPAR\(126\)/RPAR\(127\)) s
5 95 M
( 4115           ENDIF) s
5 84 M
( 4116 ) s
5 73 M
( 4117 C End New Code) s
5 51 M
( 4145         else) s
5 40 M
( 4146 ) s
5 29 M
( 4147           PYJGX\(JSUB,IG\)=0.D0) s
5 18 M
( 4148           WORKK\(IG\) = 0.D0) s
5 7 M
( 4149           WORK\(IG\) = 0.D0) s
_R
S
%%Page: (4) 4
%%BeginPageSetup
_S
24 24 translate
/pagenum 4 def
/fname (PoissonStrategyCode.txt) def
/fdir (.) def
/ftail (PoissonStrategyCode.txt) def
% User defined strings:
/fmodstr (Wed Apr 18 16:35:58 2018) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 766 M
( 4150 ) s
5 755 M
( 4151           write \(*,*\) "Cycling past \(JSUB,IG\) ==", JSUB, IG) s
5 744 M
( 4152 ) s
5 733 M
( 4153 C          GO TO 800 ! we'll get there next anyways) s
5 722 M
( 4154         endif) s
5 700 M
( 4158   800   CONTINUE) s
5 678 M
( 4183       CALL NOTINT\(VOLSPA,NGRID,NACTVE,WORK,MAXGRD,PYJ\)) s
5 656 M
( 4240  1000   CONTINUE) s
5 634 M
(! Note: if gamma is optimized, the PYJGX is calculated using the above DO 1000) s
5 623 M
(!   loop, which should already be set up to operate on Poisson r.v.s) s
5 601 M
( 4344 c begin optimization) s
5 579 M
( 4349       igamma = igamma + 1) s
5 568 M
( 4350       if\(ierrmod.eq.1\) igamma=1) s
5 557 M
( 4351 csdsc - added April 2, 2000) s
5 546 M
( 4352 c con first iteration, call hte interior point method) s
5 535 M
( 4353 ) s
5 524 M
( 4354       if\(mod\(igamma,3\).eq.1\) then) s
5 513 M
( 4355       IF\(ISUPRES .EQ. 0\) write\(6,*\)) s
5 502 M
( 4356       IF\(ISUPRES .EQ. 0\) write\(6,*\) 'icycle,igamma =',icycle,igamma) s
5 491 M
( 4357       IF\(ISUPRES .EQ. 0\)) s
5 480 M
( 4358      1 write\(6,*\) 'condensing current ', nactve, ' point grid') s
5 469 M
( 4359       IF\(ISUPRES .EQ. 0\) write\(6,*\) 'base gamma =',gamma) s
5 458 M
( 4360 ) s
5 447 M
( 4361       gammab = gamma) s
5 436 M
( 4362       gammap = gamma * \(1.d0+gamdel\)) s
5 425 M
( 4363       gammam = gamma / \(1.d0+gamdel\)) s
5 414 M
( 4364       call emint\(pyjgx,maxsub,corden,maxgrd,nactve,nsub,1,) s
5 403 M
( 4365      &corden\(1,nvar+1\),denstor\(1,1\),denstor\(1,2\),denstor\(1,3\),) s
5 392 M
( 4366      &fobj,gap,nvar,keep,IHESS\)) s
5 370 M
( 4385       fobj1 = fobj) s
5 359 M
( 4386       nactve1 = nactve) s
5 348 M
( ) s
5 337 M
( 4395       nactve = keep) s
5 326 M
( 4396       call emint\(pyjgx,maxsub,corden,maxgrd,nactve,nsub,0,) s
5 315 M
( 4397      &corden\(1,nvar+1\),denstor\(1,1\),denstor\(1,2\),denstor\(1,3\),) s
5 304 M
( 4398      &fobj,gap,nvar,keep,IHESS\)) s
5 282 M
( 4413       fobjbase = fobj) s
5 271 M
( ) s
5 260 M
( 4429       fobjbest = fobjbase) s
5 249 M
( ) s
5 238 M
( 4433       if\(ierrmod.eq.1\) go to 14001) s
5 227 M
( 4434       gamma = gammap) s
5 216 M
( 4435       RPAR\(96\) = gamma) s
5 205 M
( 4436       go to 10001) s
5 194 M
( 4437 ) s
5 183 M
( 4438       endif) s
5 172 M
( 4439 cgamma above endif is for mod\(igamma,3\).eq.1 case) s
5 161 M
( 4440       if\(mod\(igamma,3\).eq.2\) then) s
5 139 M
( 4445       call emint\(pyjgx,maxsub,corden,maxgrd,nactve,nsub,0,) s
5 128 M
( 4446      &corden\(1,nvar+1\),denstor\(1,1\),denstor\(1,2\),denstor\(1,3\),) s
5 117 M
( 4447      &fobj,gap,nvar,keep,IHESS\)) s
5 95 M
( 4460       fobjplus = fobj) s
5 73 M
( 4469       if\(fobjplus.gt.fobjbest\) then) s
5 62 M
( 4470       fobjbest = fobjplus) s
5 40 M
( 4476       gamma = gammam) s
5 29 M
( 4477       RPAR\(96\) = gamma) s
5 7 M
( 4483          go to 10001) s
_R
S
%%Page: (5) 5
%%BeginPageSetup
_S
24 24 translate
/pagenum 5 def
/fname (PoissonStrategyCode.txt) def
/fdir (.) def
/ftail (PoissonStrategyCode.txt) def
% User defined strings:
/fmodstr (Wed Apr 18 16:35:58 2018) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 766 M
( 4484       endif) s
5 755 M
( 4485       if\(mod\(igamma,3\).eq.0\) then) s
5 733 M
( 4489       call emint\(pyjgx,maxsub,corden,maxgrd,nactve,nsub,0,) s
5 722 M
( 4490      &corden\(1,nvar+1\),denstor\(1,1\),denstor\(1,2\),denstor\(1,3\),) s
5 711 M
( 4491      &fobj,gap,nvar,keep,IHESS\)) s
5 689 M
( 4506       fobjminu = fobj) s
5 667 M
( 4511       if\(fobjminu.gt.fobjbest\) then) s
5 656 M
( 4512       fobjbest = fobjminu) s
5 634 M
( 4516       endif) s
5 612 M
( 4520       endif) s
5 590 M
( 4525       gamma = gammab) s
5 579 M
( 4526       RPAR\(96\) = gammab) s
5 568 M
( 4527       fobj = fobjbase) s
5 557 M
( 4528       if\(fobjplus.gt.fobjbase\) then) s
5 546 M
( 4529       gamma = gammap) s
5 535 M
( 4530       RPAR\(96\) = gammap) s
5 524 M
( 4531 ) s
5 513 M
( 4532       fobj = fobjplus) s
5 502 M
( 4533       gamdel = 4.*gamdel) s
5 491 M
( 4534       endif) s
5 480 M
( 4535       if\(fobjminu.gt.fobjbase\) then) s
5 469 M
( 4536       gamma = gammam) s
5 458 M
( 4537       RPAR\(96\) = gammam) s
5 447 M
( 4538       fobj = fobjminu) s
5 436 M
( 4539       gamdel = 4.*gamdel) s
5 425 M
( 4540       endif) s
5 414 M
( 4541 ) s
5 403 M
( 4542       gamdel = gamdel*0.5) s
5 392 M
( 4543       if\(gamdel.lt.0.01\) gamdel=0.01) s
5 381 M
( 4544 14001 continue) s
5 370 M
( 4545 cgam5 above label is entry point for ierrmod = 1 \(no  gamma\) case) s
5 348 M
( 4559 cend optimization) s
5 326 M
(C------- SUBROUTINE SUBRES\(\)) s
5 315 M
( 8183             CALL IDPC\(JSUB,IG,NPX,PX,W,NOBSER,NUMEQT,NDIM,MF,) s
5 304 M
( 8184      1        RTOL,ATOL,RSCOPY,BSCOPY,INTLIST,IPAR,ObsError,RPAR\)) s
5 282 M
(! Code following CALL IDPC\(\) at 8183 is similar to PYJGX code for DO 800 loop) s
5 260 M
(C------) s
5 249 M
(10891         SUBROUTINE CALCRF\(NTOTPAR,VEC,FNTVAL,NUMEQT,YO,C0,C1,C2,C3,) s
5 238 M
(10892      1    NDIM,MF,RTOL,ATOL,PCOPY,RSCOPY,BSCOPY,INTLIST,IPAR,ObsError,) s
5 227 M
(10893      2    RPAR\)) s
5 205 M
(10934        integer NNORMALOBS, NPOISSONOBS, MISVAL) s
5 183 M
(11019        DO 140 I=1,NOBSER) s
5 172 M
(11020         DO 140 J=1,NUMEQT) s
5 161 M
(11021 ) s
5 150 M
(11022          Y = YO\(I,J\)) s
5 139 M
(11023 ) s
5 128 M
(11024 C  IF YO\(I,J\) = -99, IT MEANS THAT OUTPUT EQ. J HAD NO VALUE AT) s
5 117 M
(11025 C  OBSERVATION TIME I. IN THIS CASE, SIG\(I,J\) WILL NOT BE SET, AND IT) s
5 106 M
(11026 C  OF COURSE WILL NOT BE NEEDED IN SUBROUTINE FUNC.) s
5 95 M
(11027 ) s
5 84 M
(11028          IF\(Y .EQ. -99\) GO TO 140) s
5 73 M
(11029 ) s
5 62 M
(11030          if \(C0\(J\).eq.-299.and.C2\(J\).eq.-299) s
5 51 M
(11031      1     .and.C3\(J\).eq.-299\) then) s
5 40 M
(11032 C--------------------------------- Start Poisson) s
5 29 M
(11033 ) s
5 18 M
(11034              write \(*,*\) "Poisson analysis req. for OUTEQ",J) s
5 7 M
(11035              NPOISSONOBS=NPOISSONOBS+1) s
_R
S
%%Page: (6) 6
%%BeginPageSetup
_S
24 24 translate
/pagenum 6 def
/fname (PoissonStrategyCode.txt) def
/fdir (.) def
/ftail (PoissonStrategyCode.txt) def
% User defined strings:
/fmodstr (Wed Apr 18 16:35:58 2018) def
/pagenumstr (6) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 766 M
(11036              ObsError\(I,J\)=1.D0) s
5 755 M
(11037              SIG\(I,J\)=1.D0) s
5 744 M
(11038              IPAR\(110+J\)=229) s
5 733 M
(11039 ) s
5 722 M
(11040 C--------------------------------- End Poisson) s
5 711 M
(11041          else) s
5 700 M
(11042 C--------------------------------- Start NORMAL) s
5 689 M
(11043 ) s
5 678 M
(11044 ) s
5 667 M
(11045          SIG\(I,J\) = C0\(J\)+C1\(J\)*Y+C2\(J\)*Y*Y+C3\(J\)*Y**3) s
5 656 M
(11046          if\(ierrmod.eq.2\) sig\(i,j\) = sig\(i,j\)*gamma) s
5 645 M
(11047          if\(ierrmod.eq.3\) sig\(i,j\)=dsqrt\(sig\(i,j\)**2 + gamma**2\)) s
5 634 M
(11048          if\(ierrmod.eq.4\) sig\(i,j\) = gamma*flat) s
5 623 M
(11049 ) s
5 612 M
(11050          ObsError\(I,J\) = sig\(I,J\)) s
5 601 M
(11051 ) s
5 590 M
(11052 C--------------------------------- End NORMAL) s
5 579 M
(11053          endif) s
5 568 M
(11054 ) s
5 557 M
(11055   140    CONTINUE) s
5 535 M
(11073         CALL IDPC\(JSUB,IG,NPX,PX,W,NOBSER,NUMEQT,) s
5 524 M
(11074      1    NDIM,MF,RTOL,ATOL,RSCOPY,BSCOPY,INTLIST,IPAR,ObsError,RPAR\)) s
5 502 M
(11085        SUMTOT = SUMTOT + W) s
5 480 M
(11094       FNTVAL = SUMTOT  ! Nelder Mead simplex vertex) s
5 458 M
(11097         RETURN) s
5 436 M
(C----------------------------------------------------------------------) s
5 414 M
( 589 C wmy2017Sep12 Receiving /TOUSER/ varbs) s
5 403 M
( 590       SUBROUTINE FUNC\(JSUB,IG,M,F,NPX,PX,) s
5 392 M
( 591      1   NDIM,MF,RTOL,ATOL,P,RSCOPY,BSCOPY,) s
5 381 M
( 592      2   INTLIST,IPAR,ObsError,RPAR\)) s
5 359 M
( 723        integer NNORMALOBS, NPOISSONOBS, MISVAL) s
5 348 M
( 724        real*8 SIGFAC,OFAC) s
5 326 M
(! Calling USERANAL or ANAL3 for each event time) s
5 304 M
(1764 C wmy2017Dec29 Replaced COMMON STDEV with ObsError; note COMMON STDEV is) s
5 293 M
(1765 c  commented out above; uncomment if you need to use it!) s
5 282 M
(1766 c          IF\(YO\(I,J\) .NE. -99\) F\(\(J-1\)*M+I\) =\(Y\(I,J\)-YO\(I,J\)\)/STDEV\(I,J\)) s
5 271 M
(1767 ) s
5 260 M
(1768 C C       DO J=1,NOS) s
5 249 M
(1769 C C         DO I=1,M) s
5 238 M
(1770 C C           IF\(YO\(I,J\) .EQ. -99\) F\(\(J-1\)*M+I\) = 0.D0) s
5 227 M
(1771 C C           IF\(YO\(I,J\) .NE. -99\) F\(\(J-1\)*M+I\) =\(Y\(I,J\)-YO\(I,J\)\)) s
5 216 M
(1772 C C    1                                         /ObsError\(I,J\)) s
5 205 M
(1773 C        DO J=1,INTLIST\(9\)) s
5 194 M
(1774 C         DO I=1,INTLIST\(10\)) s
5 183 M
(1775 C         IF\(YO\(I,J\) .EQ. -99\) F\(\(J-1\)*INTLIST\(10\)+I\) = 0.D0) s
5 172 M
(1776 C         IF\(YO\(I,J\) .NE. -99\) F\(\(J-1\)*INTLIST\(10\)+I\) =\(Y\(I,J\)-YO\(I,J\)\)) s
5 161 M
(1777 C     1                                         /ObsError\(I,J\)) s
5 150 M
(1778 C        END DO) s
5 139 M
(1779 C        END DO) s
5 128 M
(1780 ) s
5 117 M
(1781 C ------ Above is old code, that assumed ObsError filled in main and ---) s
5 106 M
(1782 C ------ all measures are Normally distributed r.v.s -------------------) s
5 95 M
(1783 C ------ Below assumes some measures are Poisson. ----------------------) s
5 84 M
(1784 ) s
5 73 M
(1785 C Poisson or Normally distributed measurements) s
5 62 M
(1786 C) s
5 51 M
(1787 C Strategy: In model.txt, for each of the 7 output equation set IPAR to) s
5 40 M
(1788 C indicate: Log10 or absolute measurement is reported, Poisson or Normal) s
5 29 M
(1789 C as flagged. Also, uses RPAR\(>94,257\) if real values, such as assay) s
5 18 M
(1790 C error coefficients are reqd.) s
5 7 M
(1791 C) s
_R
S
%%Page: (7) 7
%%BeginPageSetup
_S
24 24 translate
/pagenum 7 def
/fname (PoissonStrategyCode.txt) def
/fdir (.) def
/ftail (PoissonStrategyCode.txt) def
% User defined strings:
/fmodstr (Wed Apr 18 16:35:58 2018) def
/pagenumstr (7) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 766 M
(1792 C Computation:) s
5 755 M
(1793 ) s
5 744 M
(1794         NNORMALOBS =0) s
5 733 M
(1795         NPOISSONOBS = 0) s
5 722 M
(1796         MISVAL = 0) s
5 711 M
(1797         SIGFAC=1.D0) s
5 700 M
(1798         OFAC=0.D0) s
5 689 M
(1799         RPAR\(128\) = 1.D0) s
5 678 M
(1800         RPAR\(129\) = 0.D0) s
5 667 M
(1801 ) s
5 656 M
(1802 C-----------------------------------------------------------------------) s
5 645 M
(1803 C DO 140 loop was done in main. Moved DO 140 here because some YOBSERVED) s
5 634 M
(1804 C are not Normally distributed.  Note that SIGFAC and OFAC were) s
5 623 M
(1805 C calculated prior to doing anything \(by assuming it's OK to use) s
5 612 M
(1806 C YOBSERVED as a surrogate to the true mean: YMEAN.  Note: Useful to) s
5 601 M
(1807 C calculate DO 140 prior to any other calculation b/c \(1\) if a problem) s
5 590 M
(1808 C arises you can immediatley exit code and so not waste a lot of user) s
5 579 M
(1809 C time, and \(2\) saves a lot of computation! The first point is still) s
5 568 M
(1810 C valid -- so we should calculate DO 140 prior to the DO 800 loop for) s
5 557 M
(1811 C \(at least\) the first few cycles, using YOBSERVED as surrogate for) s
5 546 M
(1812 C YMEAN. This also allows us to have a more stable estimate of ObsError) s
5 535 M
(1813 C in the event that YMEAN is absurd. Or to have a "relaxation" toward) s
5 524 M
(1814 C YMEAN from YOBSERVED. For example, use the res parameter to control) s
5 513 M
(1815 C use of YMEAN or YOBSERVED or even use the average of these two values.) s
5 502 M
(1816 C wmy will just go ahead and program the average) s
5 491 M
(1817 ) s
5 480 M
(1818 C M Is a verbatim copy of code from Main that is NOT merged w/idm1*) s
5 469 M
(1819 C   Is a comment) s
5 458 M
(1820 ) s
5 447 M
(1821 C  ******* DO 140 loop from main *******) s
5 436 M
(1822 C) s
5 425 M
(1823 C  FIND THE ASSAY STANDARD DEVIATIONS FOR THIS SUBJECT. FOR EACH) s
5 414 M
(1824 C  OF THE NOBSER*NUMEQT OBSERVED VALUES \(EXCEPT THAT YO\(I,J\) = -99 -->) s
5 403 M
(1825 C  OUTPUT EQ. J HAS NO OBSERVED LEVEL FOR OBSERVATION TIME I\),) s
5 392 M
(1826 C  Y, SIG = C0 + C1*Y + C2*Y**2 + C3*Y**3.) s
5 381 M
(1827 C  NOTE THAT, THEORETICALLY, SIG SHOULD BE A CUBIC FNT. OF) s
5 370 M
(1828 C  THE 'TRUE' OBSERVED VALUES, NOT THE 'NOISY' OBSERVED VALUES \(BUT THE) s
5 359 M
(1829 C  'TRUE' VALUES ARE UNKNOWN\).) s
5 348 M
(1830 ) s
5 337 M
(1831 C  ALSO, CALCULATE SIGFAC, THE PRODUCT OF THE NON-MISSING STD. DEV.'S) s
5 326 M
(1832 ) s
5 315 M
(1833 C  \(A NON-MISSING S.D. IS ONE FOR WHICH THE CORRESPONDING YO\(I,J\) IS) s
5 304 M
(1834 C  .NE. -99, THE MISSING VALUE CODE\).) s
5 293 M
(1835 C  INITIALIZE SIGFAC=1, AND THEN UPDATE IT FOR EACH NON-MISSING) s
5 282 M
(1836 C  OBSERVATION.) s
5 271 M
(1837 ) s
5 260 M
(1838 C  MISVAL WILL BE THE RUNNING TOTAL OF MISSING VALUES AMONG ALL THE) s
5 249 M
(1839 C  NUMEQT x NOBSER POTENTIAL OBSERVED LEVELS.) s
5 238 M
(1840 ) s
5 227 M
(1841 C M      DO 140 I=1,NOBSER) s
5 216 M
(1842 C M       DO 140 J=1,NUMEQT) s
5 205 M
(1843 C) s
5 194 M
(1844         DO J=1,INTLIST\(9\)     ! NUMEQT or number of output equations) s
5 183 M
(1845          DO I=1,INTLIST\(10\)   ! Number of measurements) s
5 172 M
(1846 ) s
5 161 M
(1847 C  IF Y = -99, IT MEANS THAT OUTPUT EQ. J HAD NO VALUE AT OBSERVATION) s
5 150 M
(1848 C  TIME I. IN THIS CASE, IGNORE THIS Y AND INCREASE MISVAL BY 1.) s
5 139 M
(1849 ) s
5 128 M
(1850 C M        Y = YO\(I,J\) ! replaced by YMEAN, below) s
5 117 M
(1851 C M        IF\(Y .EQ. -99\) THEN    ! This is moved above) s
5 106 M
(1852 C M         MISVAL = MISVAL+1) s
5 95 M
(1853 C M         GO TO 140          ! Not necessary anymore, logic changed) s
5 84 M
(1854 C M        ENDIF) s
5 73 M
(1855 C M        IF\(YO\(I,J\) .NE. -99\) then { Assume obs ~ Normal }) s
5 62 M
(1856 ) s
5 51 M
(1857           if\(YO\(I,J\) .EQ. -99\) then) s
5 40 M
(1858            F\(\(J-1\)*INTLIST\(10\)+I\) = 0.D0) s
5 29 M
(1859            MISVAL = MISVAL+1) s
5 18 M
(1860 ) s
5 7 M
(1861           else) s
_R
S
%%Page: (8) 8
%%BeginPageSetup
_S
24 24 translate
/pagenum 8 def
/fname (PoissonStrategyCode.txt) def
/fdir (.) def
/ftail (PoissonStrategyCode.txt) def
% User defined strings:
/fmodstr (Wed Apr 18 16:35:58 2018) def
/pagenumstr (8) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 766 M
(1862 ) s
5 755 M
(1863 C ASSIGN YOBSERVED and YMEAN \(predicted\) for this measurement) s
5 744 M
(1864 ) s
5 733 M
(1865            IF \(IPAR\(120 + J\) == 10\) THEN  ! Y is log10\(X\) and YO\(I,J\) are log10\(obs\)) s
5 722 M
(1866             YOBSERVED = 10^\(YO\(I,J\)\)     ! log10\(obs\) enterred in data.csv) s
5 711 M
(1867             YMEAN = 10^Y\(I,J\)            ! log10\(X\) happenned in call to OUTPUT) s
5 700 M
(1868            ELSE) s
5 689 M
(1869             YOBSERVED = YO\(I,J\)) s
5 678 M
(1870             YMEAN = Y\(I,J\)) s
5 667 M
(1871            ENDIF) s
5 656 M
(1872 ) s
5 645 M
(1873 C YOBSERVED ~ POISSON) s
5 634 M
(1874 ! 229 == extended ASCII code for lower case lambda; USE Poisson) s
5 623 M
(1875            IF \(IPAR\(110 + J\) == 229\) THEN) s
5 612 M
(1876 ) s
5 601 M
(1877 C            Poisson: p\( YO\(i,J\) | Y\(I,J\) \) =  exp\( -1 * Y\(I,J\) \)) s
5 590 M
(1878 C                              * \( Y\(I,J\)^YO\(I,J\) / fact\(YO\(I,J\)\) \)\)) s
5 579 M
(1879 ) s
5 568 M
(1880               P_thresh = 30.0) s
5 557 M
(1881 ) s
5 546 M
(1882 ! fact reqs nint\(\); but fact\(N\) = Gamma\(N + 1\)) s
5 535 M
(1883               YOBSERVED = nint\(YOBSERVED\)) s
5 524 M
(1884 ! Poisson w/mean Y; OK to be a REAL value) s
5 513 M
(1885               ObsError\(I,J\) = sqrt\( YMEAN \)) s
5 502 M
(1886 ) s
5 491 M
(1887 !  Normal approx. is used for P_thresh = 60) s
5 480 M
(1888               IF \(YMEAN > P_thresh\) THEN) s
5 469 M
(1889                  SIGFAC = SIGFAC * ObsError\(I,J\)) s
5 458 M
(1890                  NNORMALOBS = NNORMALOBS+1) s
5 447 M
(1891                  RPAR\(128\) = RPAR\(128\)) s
5 436 M
(1892      1                 + \(\(YOBSERVED - YMEAN\)/ObsError\(I,J\)\)**2) s
5 425 M
(1893 ! F equals the Poisson probability, not \(y - yo\)/sigma) s
5 414 M
(1894               ELSE) s
5 403 M
(1895                  NPOISSONOBS = NPOISSONOBS + 1) s
5 392 M
(1896                  RPAR\(129\) = RPAR\(129\) * exp\( -1 * YMEAN \)) s
5 381 M
(1897      1           * \( YMEAN^YOBSERVED \) / gamma\( YOBSERVED + 1.0D \)) s
5 370 M
(1898               ENDIF) s
5 359 M
(1899 ) s
5 348 M
(1900 C YOBSERVED ~ NORMAL) s
5 337 M
(1901            ELSE) s
5 326 M
(1902 C              // CODE for Normal is unchanged from previous program) s
5 315 M
(1903 C) s
5 304 M
(1904 C M NOTE: FOR EACH SUBJECT, MUST ENSURE THAT ALL THE STD DEV'S ARE NON-) s
5 293 M
(1905 C        ZERO. OTHERWISE, THE PROGRAM WILL BLOW UP! THIS IS BECAUSE) s
5 282 M
(1906 C        P\(YJ|X\) INVOLVES SQUARED DIFFERNCES BETWEEN OBSERVED Y'S AND) s
5 271 M
(1907 C        EXPECTED Y'S \(FOR EACH X GRID POINT\)...EACH DIFFERENCE) s
5 260 M
(1908 C        NORMALIZED \(I.E., DIVIDED\) BY THE VARIANCE OF THE RESPECTED) s
5 249 M
(1909 C        OBSERSATION.) s
5 238 M
(1910 ) s
5 227 M
(1911 C M  SEE M2_17CAL.F CODE FOR COMMENTS ON HOW A STD. DEV. COULD = 0.) s
5 216 M
(1912 ) s
5 205 M
(1913 C M  ALSO TEST TO MAKE SURE NO STD. DEV. < 0, SINCE SIGFAC BEING NEGATIVE) s
5 194 M
(1914 C  WOULD RESULT IN A NEGATIVE PROBABILITY \(SEE PYJGX CALCULATION BELOW\).) s
5 183 M
(1915 ) s
5 172 M
(1916 C note: in main:) s
5 161 M
(1917 C ierrmod -> IPAR\(38\)) s
5 150 M
(1918 C gamma -> RPAR\(96\)) s
5 139 M
(1919 C flat -> RPAR\(97\)) s
5 128 M
(1920 C C0 -> RPAR\(98,99,100,101,102,103,104\)) s
5 117 M
(1921 C C1 -> RPAR\(105:111\)) s
5 106 M
(1922 C C2 -> RPAR\(112:118\)) s
5 95 M
(1923 C C3 -> RPAR\(119:125\)) s
5 84 M
(1924 ) s
5 73 M
(1925 C M            SIG\(I,J\) = C0\(J\)+C1\(J\)*Y+C2\(J\)*Y*Y+C3\(J\)*Y**3) s
5 62 M
(1926 C M            ObsError\(I,J\) = SIG\(I,J\) ! at end of DO 140) s
5 51 M
(1927               ObsError\(I,J\) = RPAR\(J+97\) + RPAR\(J+104\)*YMEAN) s
5 40 M
(1928      1            + RPAR\(J+111\)*YMEAN*YMEAN + RPAR\(J+118\)*YMEAN**3) s
5 29 M
(1929 ) s
5 18 M
(1930 C M cgam4) s
5 7 M
(1931 C M       if\(ierrmod.eq.2\) sig\(i,j\) = sig\(i,j\)*gamma) s
_R
S
%%Page: (9) 9
%%BeginPageSetup
_S
24 24 translate
/pagenum 9 def
/fname (PoissonStrategyCode.txt) def
/fdir (.) def
/ftail (PoissonStrategyCode.txt) def
% User defined strings:
/fmodstr (Wed Apr 18 16:35:58 2018) def
/pagenumstr (9) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 766 M
(1932 C M       if\(ierrmod.eq.3\) sig\(i,j\) = dsqrt\(sig\(i,j\)**2 + gamma**2\)) s
5 755 M
(1933 C M       if\(ierrmod.eq.4\) sig\(i,j\) = gamma*flat) s
5 744 M
(1934 ) s
5 733 M
(1935               if\(IPAR\(38\).eq.2\) ObsError\(i,j\) = ObsError\(i,j\)*RPAR\(96\)) s
5 722 M
(1936               if\(IPAR\(38\).eq.4\) ObsError\(i,j\) = RPAR\(96\)*RPAR\(97\)) s
5 711 M
(1937               if\(IPAR\(38\).eq.3\) ObsError\(i,j\) = dsqrt\(ObsError\(i,j\)**2) s
5 700 M
(1938      1               + RPAR\(96\)**2\)) s
5 689 M
(1939) s
5 667 M
(! Check that ObsError > 0.D0; else EXIT program) s
5 645 M
(1982 C--------------  SIGFAC and NNORMALOBS) s
5 634 M
(1983 ) s
5 623 M
(1984 C In main, COMMON SIG is used, and values are copied from SIG into) s
5 612 M
(1985 C ObsError. ObsError is used inside of the parallel region. Here, we) s
5 601 M
(1986 C only have access to ObsError, not SIG. So fill ObsError, and copy) s
5 590 M
(1987 C ObsError to SIG when you return to main. Note that the analytic) s
5 579 M
(1988 C routines use COMMON SIG \(the primary reason we have to still) s
5 568 M
(1989 C calculate SIG in main\).  ObsError may be calculated differently) s
5 557 M
(1990 C here, than in main.) s
5 546 M
(1991 ) s
5 535 M
(1992 C M      ObsError\(I,J\) = SIG\(I,J\)) s
5 524 M
(1993 ) s
5 513 M
(1994               SIGFAC=SIGFAC*ObsError\(I,J\)) s
5 502 M
(1995               NNORMALOBS=NNORMALOBS+1) s
5 491 M
(1996 ) s
5 480 M
(1997               RPAR\(128\) = RPAR\(128\)) s
5 469 M
(1998      1           + \(\(YOBSERVED\(I,J\)-YMEAN\(I,J\)\)/ObsError\(I,J\)\)**2) s
5 458 M
(1999 ) s
5 447 M
(2000            endif ! if\(Poisson\){...} else {Normal}) s
5 436 M
(2001 ) s
5 425 M
(2002           ENDIF ! if\(YO\(I,J\) .EQ. -99\){...} else {YO ~ {Normal,Poisson}}) s
5 414 M
(2003 C) s
5 403 M
(2004 C wmy2018Apr18 -- F is always the z-score) s
5 392 M
(2005 C) s
5 381 M
(2006        F\(\(J-1\)*INTLIST\(10\)+I\)=\(YOBSERVED\(I,J\)-YMEAN\(I,J\)\)/ObsError\(I,J\)) s
5 370 M
(2007 ) s
5 359 M
(2008          END DO ! number of measurements) s
5 348 M
(2009         END DO ! number of output equations) s
5 337 M
(2010 C M  140 CONTINUE ! is replaced by the two END DO above) s
5 315 M
(2022         OFAC=2.506628274631**NNORMALOBS) s
5 304 M
(2023 ) s
5 293 M
(2024 C Final checks on NNORMALOBS, NPOISSONOBS, MISVAL, SIGFAC, and OFAC) s
5 282 M
(2025 C Copy values into appropriate IPAR and RPAR bins for communication) s
5 271 M
(2026 C back up to main.) s
5 260 M
(2027 C) s
5 249 M
(2028 C RPAR\(129\) = \\prod Poisson Probs) s
5 238 M
(2029 C RPAR\(128\) = summsq Normalized deviations for Y_obs ~ Normal) s
5 227 M
(2030         RPAR\(126\) = SIGFAC) s
5 216 M
(2031         RPAR\(127\) = OFAC) s
5 205 M
(2032         IPAR\(39\) = MISVAL) s
5 194 M
(2033         IPAR\(40\) = NNORMALOBS) s
5 183 M
(2034         IPAR\(41\) = NPOISSONOBS) s
5 161 M
(2079       RETURN) s
5 150 M
(2080       END) s
_R
S
%%Trailer
%%Pages: 9
%%DocumentNeededResources: font Courier-Bold Courier 
%%EOF
