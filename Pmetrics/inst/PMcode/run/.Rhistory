format=c(dates="m/d/y",times="h:m:s"))
skip <- grep("pwr_torque",data)
dur <- length(data)-skip
workout <- matrix(scan(files[i],skip=skip,sep=",",nlines=dur,quiet=T),nrow=dur,byrow=T)
hr[1:dur,i] <- workout[,10]
}
hr <- hr[apply(hr,1,function(x) !all(is.na(x))),]
hr <- hr[,-1]
hr <- matrix(hr,ncol=numWrkouts)
times <- (1:nrow(hr))/60
plot(x=range(times),y=range(hr,na.rm=T),type="n",xlab="Minutes",ylab="Heart Rate")
for(i in 1:ncol(hr)){
lines(x=times,y=hr[,i],col=c("black","red")[i])
}
hrMean <- apply(hr,1,mean,na.rm=T)
hrSD <- apply(hr,1,sd,na.rm=T)
hrSD[is.na(hrSD)] <- 0
plot(x=times,y=hrMean,type="n",xlab="Minutes",ylab="Average Heart Rate",ylim=c(50,180),main="Tacfit Mission 1 Recruit Heart Rate")
polygon(x=c(times,rev(times)),y=c(hrMean+hrSD,rev(hrMean)-rev(hrSD)),col="lightblue",border=NA)
lines(x=times,y=hrMean)
abline(v=c(6,36),lty=2,lwd=2)
abline(v=seq(11,36,5),lty=3,lwd=1)
text(x=c(3,seq(8.5,33.5,5),39),y=rep(175,8),adj=0.5,label=c("Warmup","Lunge","Plank knee","Sit twist","Push-up","Spinal rock","Tripod","Cool down"),cex=0.7)
cols <- c("black","red","blue","green","orange","purple")
plot(x=tabata$dt-tabata$dt[1],y=seq(min(tabata[,-1]),max(tabata[,-1]),length.out=nrow(tabata)),
type="n",xlab="Day",ylab="Reps",main="Tacfit Mission 1 Recruit Tabata")
lines(y=apply(tabata[,-1],1,mean),x=tabata$dt-tabata$dt[1],col="grey90",lwd=20)
for(j in 2:7){
lines(y=tabata[,j],x=tabata$dt-tabata$dt[1],col=cols[j-1],type="o")
}
legend("topleft",lty=1,lwd=c(rep(1,6),10),col=c(cols,"grey90"),legend=c(names(tabata)[-1],"Mean"),cex=0.7)
hr
hr <- hr[,-1]
hr
hr <- matrix(hr,ncol=numWrkouts)
hr
library(chron)
files <- paste("~/Dropbox/Apps/WahooFitness/",list.files("/Users/neely/Dropbox/Apps/WahooFitness",pattern="[[:alnum:]]*.csv",recursive=T),sep="")
tabata <- read.csv(files[length(files)])
files <- files[1:(length(files)-1)]
numWrkouts <- length(files)
hr <- matrix(NA,nrow=5000,ncol=numWrkouts,dimnames=list(time=1:5000,workout=1:numWrkouts))
for (i in 1:numWrkouts){
data <- readLines(files[i])
tabata$dt[i] <- chron(dates.=paste(strsplit(data[2],",")[[1]][c(4,6,2)],collapse="/"),
times.=paste(strsplit(data[2],",")[[1]][c(8,10,12)],collapse=":"),
format=c(dates="m/d/y",times="h:m:s"))
skip <- grep("pwr_torque",data)
dur <- length(data)-skip
workout <- matrix(scan(files[i],skip=skip,sep=",",nlines=dur,quiet=T),nrow=dur,byrow=T)
hr[1:dur,i] <- workout[,10]
}
hr <- hr[apply(hr,1,function(x) !all(is.na(x))),]
hr <- matrix(hr,ncol=numWrkouts)
times <- (1:nrow(hr))/60
plot(x=range(times),y=range(hr,na.rm=T),type="n",xlab="Minutes",ylab="Heart Rate")
for(i in 1:ncol(hr)){
lines(x=times,y=hr[,i],col=c("black","red")[i])
}
hrMean <- apply(hr,1,mean,na.rm=T)
hrSD <- apply(hr,1,sd,na.rm=T)
hrSD[is.na(hrSD)] <- 0
plot(x=times,y=hrMean,type="n",xlab="Minutes",ylab="Average Heart Rate",ylim=c(50,180),main="Tacfit Mission 1 Recruit Heart Rate")
polygon(x=c(times,rev(times)),y=c(hrMean+hrSD,rev(hrMean)-rev(hrSD)),col="lightblue",border=NA)
lines(x=times,y=hrMean)
abline(v=c(6,36),lty=2,lwd=2)
abline(v=seq(11,36,5),lty=3,lwd=1)
text(x=c(3,seq(8.5,33.5,5),39),y=rep(175,8),adj=0.5,label=c("Warmup","Lunge","Plank knee","Sit twist","Push-up","Spinal rock","Tripod","Cool down"),cex=0.7)
cols <- c("black","red","blue","green","orange","purple")
plot(x=tabata$dt-tabata$dt[1],y=seq(min(tabata[,-1]),max(tabata[,-1]),length.out=nrow(tabata)),
type="n",xlab="Day",ylab="Reps",main="Tacfit Mission 1 Recruit Tabata")
lines(y=apply(tabata[,-1],1,mean),x=tabata$dt-tabata$dt[1],col="grey90",lwd=20)
for(j in 2:7){
lines(y=tabata[,j],x=tabata$dt-tabata$dt[1],col=cols[j-1],type="o")
}
legend("topleft",lty=1,lwd=c(rep(1,6),10),col=c(cols,"grey90"),legend=c(names(tabata)[-1],"Mean"),cex=0.7)
plot(x=times,y=hrMean,type="n",xlab="Minutes",ylab="Average Heart Rate",ylim=c(50,220),main="Tacfit Mission 1 Recruit Heart Rate")
polygon(x=c(times,rev(times)),y=c(hrMean+hrSD,rev(hrMean)-rev(hrSD)),col="lightblue",border=NA)
lines(x=times,y=hrMean)
abline(v=c(6,36),lty=2,lwd=2)
abline(v=seq(11,36,5),lty=3,lwd=1)
text(x=c(3,seq(8.5,33.5,5),39),y=rep(175,8),adj=0.5,label=c("Warmup","Lunge","Plank knee","Sit twist","Push-up","Spinal rock","Tripod","Cool down"),cex=0.7)
plot(x=times,y=hrMean,type="n",xlab="Minutes",ylab="Average Heart Rate",ylim=c(50,220),main="Tacfit Mission 1 Recruit Heart Rate")
polygon(x=c(times,rev(times)),y=c(hrMean+hrSD,rev(hrMean)-rev(hrSD)),col="lightblue",border=NA)
lines(x=times,y=hrMean)
abline(v=c(6,36),lty=2,lwd=2)
abline(v=seq(11,36,5),lty=3,lwd=1)
text(x=c(3,seq(8.5,33.5,5),39),y=rep(220,8),adj=0.5,label=c("Warmup","Lunge","Plank knee","Sit twist","Push-up","Spinal rock","Tripod","Cool down"),cex=0.7)
plot.PMfinal
x <- runif(10,0,1)
y <- runif(10,0,1)
plot(y~x)
plot(y~x,xaxt="n",yaxt="n")
pchShow()
colors()
plot(y~x,xaxt="n",yaxt="n",xlab="",ylab="",cex=2,pch=15,bg="red")
plot(y~x,xaxt="n",yaxt="n",xlab="",ylab="",cex=2,pch=15,fill="red")
plot(y~x,xaxt="n",yaxt="n",xlab="",ylab="",cex=2,pch=16,bg="red")
plot(y~x,xaxt="n",yaxt="n",xlab="",ylab="",cex=2,pch=22,bg="red")
plot(y~x,xaxt="n",yaxt="n",xlab="",ylab="",cex=3,pch=22,bg="red")
x2 <- runif(100,0,1)
y2 <- runif(100,0,1)
plot(y2~x2,xaxt="n",yaxt="n",xlab="",ylab="",cex=3,pch=22,bg="lightpink")
colors()
plot(y2~x2,xaxt="n",yaxt="n",xlab="",ylab="",cex=3,pch=22,bg="lightpink4")
plot(y~x,xaxt="n",yaxt="n",xlab="",ylab="",cex=3,pch=22,bg="red3")
plot(y2~x2,xaxt="n",yaxt="n",xlab="",ylab="",cex=3,pch=22,bg="lightpink")
library(MASS)
#plot function
bivnplot <- function(bivn,lims,phi=25){
if(missing(lims)){lims <- c(range(bivn[,1]),range(bivn[,2]))}
bivn.kde <- kde2d(bivn[,1], bivn[,2], n = 45,lims=lims)
persp(bivn.kde, phi = phi, theta = 30,xlab="Kel",ylab="Vd",zlab="Probability",shade=0.2,col="gold",d=2,r=5,cex.lab=1.5) -> pmat
return(pmat)
}
bivn <- mvrnorm(1500, mu = c(1, 100), Sigma = matrix(c(0.1, 0, 0, 25), 2))
bivnplot(bivn)
?bibentry
citation(Pmetrics)
citation("Pmetrics")
setwd("~/LAPK/PmetricsSource/Test/SIM")
simdata1 <- SIMparse("simout1.txt")
names(simdata1)
dim(simdata1$obs)
?SIMparse
apply(simdata1$obs[1,,],2,median)
apply(simdata1$obs[1,,],2,quantile,0.25)
setwd("~/LAPK/Pmetrics")
PMtree("Voriconazole")
library(Pmetrics)
readPMdefaults()
PMopt
readPMdefaults
setDefaults(PMreadMatrix,delim=";")
getDefaults()
library(Pmetrics)
setDefaults(PMreadMatrix,delim=";")
PMwriteDefaults
PMwriteDefaults()
?PMwriteDefaults
library(Pmetrics)
getDefaults()
unsetDefaults(PMreadMatrix)
PMwriteDefaults()
library(Pmetrics)
unsetDefaults(PMreadMatrix)
PMwriteDefaults()
remove.packages("Defaults")
library(Pmetrics)
remove.packages("Defaults")
search()
install.packages(file.choose())
library(Pmetrics)
?setDefaults
??Defaults
library(Pmetrics)
remove.packages("Defaults")
search
search()
detach(2)
search()
detach(2)
install.packages(file.choose())
library(Pmetrics)
PMupdate()
library(Pmetric)
library(Pmetrics)
?plot.PMop
library(Pmetrics)
?qgrowth
data <- qgrowth("B","50")
data
data$abs <- data$wt*116
data$mgkg <- data$abs/data$wt
data
data$abs <- 116*data$wt**0.75
data$mgkg <- data$abs/data$wt
data
68*2.2
150*70/3600
sqrt(2.9166)
adult <- 40*70 / 1.7
adult
data$mgbsa <- adult * sqrt(data$wt*data$ht/3600)
data
data$mgbsa <- adult * sqrt(data$wt*data$ht/3600) / data$wt
data
data$mgbsa <- adult * sqrt(data$wt*data$ht/3600)
data
adult
data$mgbsa <- adult * sqrt(data$wt*data$ht/3600) / data$wt
data
library(Pmetrics)
setDefaults(gfortranCheck,gfortran=Sys.which("gfortran"))
PMwriteDefaults()
load("~/Desktop/temp.RData")
formals(plot.PMop)
?save
?save(input,file="temp.Rdata")
getwd()
?save(input,file="~/Desktop/temp.Rdata")
library(shiny)
require(Pmetrics)
load("~/Desktop/temp.Rdata")
input
formals(plot.PMop)
?plot.PMop
library(Pmetrics)
formals(plot.PMop)
?save
input
load("~/Desktop/temp.Rdata")
formals(plot.PMop)
save(input,file="~/Desktop/temp.Rdata")
?url
Sys.getenv()
logfile <- url("http://lapk.org/test.txt",open="w+")
logfile <- url("http://lapk.org/test.txt",open="w+")
logfile <- url("http://www.lapk.org/test.txt",open="w+")
logfile <- url("http://www.lapk.org/test.txt",open="w+")
logfile <- file("http://www.lapk.org/test.txt",open="w+")
logfile <- ftp("http://www.lapk.org/test.txt",open="w+")
logfile <- url("file://www.lapk.org/test.txt",open="w+")
logfile <- url("http://www.lapk.org/test.txt",open="w+")
logfile <- url("http://www.lapk.org/test.txt",open="r+")
logfile
?writeLines
writeLines("test1",logfile)
close(logfile)
logfile <- url("http://www.lapk.org/test.txt",open="w+")
PMupdate
library(Pmetrics)
PMupdate
library(sendmailR)
?sendmail
sendmail(from="mneely@usc.edu",to="mnneely@usc.edu",subject="Pmetrics",msg="Downloaded")
Sys.info()
Sys.info()[4]
sprintf("<sendmailR@\\%s>", Sys.info()[4])
sendmail_options()
?.Call
library(Pmetrics)
?makePTA
blocks=list(error="gamma=2")
blocks$error <- tolower(gsub("[[:space:]]","",blocks$error))
gamlam <- grep("^g|^l",blocks$error)
gamlam
fixed <- grep("\\+",blocks$error[gamlam[1]])
fixed
ierr <- unlist(strsplit(blocks$error[gamlam[1]],"="))
ierr
ierrtype <- gsub("[[:space:]]","",tolower(substr(ierr[1],1)))
ierrtype <- gsub("[[:space:]]","",tolower(substr(ierr[1],1,1)))
ierrtype
length(fixed)>0
ierrmod <- switch(ierrtype,g=2,l=3)
gamlam0 <- as.numeric(ierr[2])
ierrmod
gamlam0
blocks
blocks$error="g=2+"
blocks$error <- tolower(gsub("[[:space:]]","",blocks$error))
gamlam <- grep("^g|^l",blocks$error)
length(gamlam)>0
fixed <- grep("\\+",blocks$error[gamlam[1]])
fixed
ierr <- unlist(strsplit(blocks$error[gamlam[1]],"="))
ierrtype <- gsub("[[:space:]]","",tolower(substr(ierr[1],1,1)))
ierr
ierrtype
length(fixed)>0
blocks$error[gamlam[1]] <- gsub("\\+","",blocks$error[gamlam[1]])
ierrmod <- 1 #set to fixed gamma
gamlam0 <- 1 #initially 1, but multiply assay error coefficients by fixed amount later
ierrmod
gamlam0
fixed
engine
engine=list(numeqt=1)
iass <- ifelse(length(fixed)==0,rep(1,engine$numeqt),rep(3,engine$numeqt))
iass
makePmetrics <- function(fortranChange=F,build=T,pdf=F,check=F,ITver,NPver,SIMver){
require(devtools)
OS <- switch(.Platform$OS.type,unix=1,windows=2)
if(OS==1){
#do this only if fortran files have changed
if(fortranChange==T){
setwd("~/LAPK/PmetricsSource/Source")
system(paste("cat ./IT2B/prep/*.* > ../Pmetrics/inst/code/ITprep_",ITver,".f",sep=""))
system(paste("cat ./IT2B/error/*.* > ../Pmetrics/inst/code/ITerr_",ITver,".f",sep=""))
system(paste("cat ./IT2B/engine/*.* > ../Pmetrics/inst/code/ITeng_",ITver,".f",sep=""))
system(paste("cat ./NPAG/prep/*.* > ../Pmetrics/inst/code/NPprep_",NPver,".f",sep=""))
system(paste("cat ./NPAG/engine/*.* > ../Pmetrics/inst/code/NPeng_",NPver,".f",sep=""))
file.copy(from=paste("./Simulator/engine/MONT",SIMver,".FOR",sep=""),to=paste("../Pmetrics/inst/code/SIMeng_",SIMver,".f",sep=""),overwrite=T)
#remove comment lines and clean up
rmComm <- function(files){
for (i in files){
system(paste("~/LAPK/PmetricsSource/Source/win2mac.sa",i))
file.remove(i)
file.rename("newfile.txt",i)
code <- readLines(i)
commLines <- grep("^C",code,ignore.case=T)
commLines2 <- grep("^\\*",code)
if(length(commLines2)>0) {code <- code[-c(commLines,commLines2)]} else {code <- code[-commLines]}
code <- code[code!=""]
#longlines <- grep(".{61}",code)
#for(j in longlines){
#code[j] <- paste(substring(code[j],1,60),substring(code[j],61),sep="\n     &  ")
#}
writeLines(code,i,sep="\r\n")
}
}
setwd("~/LAPK/PmetricsSource/Pmetrics/inst/code")
rmComm(files=list.files())
}
#do this for all changes
setwd("~/LAPK/PmetricsSource")
document("Pmetrics")
if(pdf){
file.remove("./Pmetrics/inst/doc/Pmetrics-manual.pdf")
system("R CMD Rd2pdf --output=./Pmetrics/inst/doc/Pmetrics-manual.pdf --no-preview ./Pmetrics/man")}
if(check) check("Pmetrics")
if(build) build("Pmetrics",binary=T)
install("Pmetrics")
} else {  #this is for Windows
#do this for all changes
setwd("Z:/LAPK/PmetricsSource")
if(build) build("Pmetrics",binary=T)
}
}
makePmetrics(fortranChange=F,build=T,pdf=F,check=F,ITver=22,NPver=22,SIMver="106")
makePmetrics(fortranChange=F,build=T,pdf=F,check=F,ITver=22,NPver=22,SIMver="106")
setwd("~/LAPK/PmetricsSource/Test/NPAG")
NPrun(data="ex1.csv",cycles=100,auto=F)
makePmetrics(fortranChange=F,build=T,pdf=F,check=F,ITver=22,NPver=22,SIMver="106")
makePmetrics(fortranChange=F,build=T,pdf=F,check=F,ITver=22,NPver=22,SIMver="106")
setwd("~/LAPK/PmetricsSource/Test/NPAG")
NPrun(data="ex1.csv",cycles=100,auto=F)
makePmetrics(fortranChange=F,build=T,pdf=F,check=F,ITver=22,NPver=22,SIMver="106")
setwd("~/LAPK/PmetricsSource/Test/NPAG")
file.copy(from=c("../src/model.txt","../src/ex1.csv"),to=getwd(),overwrite=T)
NPrun(data="ex1.csv",cycles=100,auto=F)
library(shiny)
?textInput
?NPrun
setwd("~/LAPK/PmetricsSource/Shiny/NPrun")
runApp()
runApp()
runApp()
runApp()
?browser
runApp()
runApp()
runApp()
?NPrun
runApp()
runApp()
runApp()
?Sys.glob
?list.files
Sys.glob("mod")
Sys.glob("mod*")
runApp()
runApp()
runApp()
runApp()
list.files(pattern=Sys.glob("*ssv"))
list.files(pattern=Sys.glob("*ssv")[1])
Sys.glob("*ssv")
list.files(pattern=Sys.glob("*ssv"))[1]
runApp()
?Sys.glb
?Sys.glob
list.files(pattern="\\.csv|\\.ssv")
list.files(pattern="\\..sv")
list.files(pattern="\\..v")
list.files(pattern="\\.sv")
list.files(pattern="\\..sv")
list.files(pattern="\\..sv")[1]
list.files(pattern="\\..v")[1]
runApp()
runApp()
?NPrun
1e-06
runApp()
runApp()
runApp()
runApp()
?selectInput
runApp()
?NPrun
?NPrun
runApp()
?shiny
runApp()
runApp()
?NPrun
runApp()
runApp()
runApp()
mdata <- PMreadMatrix(input$data,quiet=T)
ndrug=2
paste(rep(1,ndrug),collapse=",")
?shiny
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
engine=list(alg="NP",nsubtot=1,nsub=1,activesub=1,ncov=1,covnames="dummy",ndrug=1,
salt=1,numeqt=1,cycles=1,icen="median",indpts=-99,aucint=24,idelta=12,xmic=1)
input=list(model="model.txt")
input$data="ex1.csv"
trans <- makeModel(model=input$model,data=input$data,engine=engine,write=F,silent=T)
trans
paste("Number of random parameters:",trans$nvar)
runApp()
runApp()
runApp()
runApp()
trans
makePmetrics(fortranChange=F,build=T,pdf=F,check=F,ITver=22,NPver=22,SIMver="106")
runApp()
setwd("~/LAPK/PmetricsSource/Shiny/NPrun")
runApp()
runApp()
trans
runApp()
runApp()
ablist <- function(){
for(i in 1:nrow(trans$ab){textInput(paste("ab",i,sep=""),"",trans$ab[i,])}
}
ablist <- function(){
for(i in 1:nrow(trans$ab)){textInput(paste("ab",i,sep=""),"",trans$ab[i,])}
}
ablist()
runApp()
runApp()
nrow(trans$ab)
?do.call
runApp()
trans$ab
runApp()
runApp()
runApp()
i=1
paste("ab",i,sep="")
abdisplay <- function(){
for(i in 1:trans$nvar){
iID <- paste("ab",i,sep="")
do.call(textInput,list(inputID=iID,label="",value=trans$ab[i,1]))
}
}
abdisplay()
?do.call
runApp()
runApp()
trans$ab
trans$ab[1,1]
trans$ab[1,1]
runApp()
runApp()
runApp()
runApp()
runApp()
abdisplay <- function(){
for(i in 1:trans$nvar){
iID <- paste("ab",i,sep="")
do.call(textInput,args=list(iID,"",paste(trans$ab[1,],collapse=",")))
}
}
substitute(abdisplay())
substitute(eval(abdisplay()))
eval(abdisplay())
eval(abdisplay())
runApp()
apply(trans$ab,1,function(x) x)
apply(trans$ab,1,function(x) row(x))
?row
?apply
apply(trans$ab,1,function(x) names(x))
apply(trans$ab,1,function(x) which(trans$a==x$a))
apply(trans$ab,1,function(x) which(trans$a==x[1,]))
apply(trans$ab,1,function(x) which(trans$ab$a==x$a))
apply(trans$ab,1,function(x) which(trans$ab$a==x))
apply
apply(trans$ab,1,function(x) x[1])
trans$ab
?index
apply(trans$ab,1,function(x) x)
apply(trans$ab,1,function(x) dimnames(x))
apply(trans$ab,1,function(x) dim(x))
runApp()
runApp()
runApp()
makePmetrics(fortranChange=F,build=T,pdf=F,check=F,ITver=22,NPver=22,SIMver="106")
setwd("~/LAPK/PmetricsSource/Shiny/NPrun")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?NPrun
runApp()
