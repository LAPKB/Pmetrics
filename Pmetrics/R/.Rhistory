?citation
packageDescritption("Pmetrics")
packageDescription("Pmetrics")
?citEntry
?package.skeleton
getwd()
package.skeleton(name="~/Desktop/test",list="NPrun")
package.skeleton(name="Users/neely/Desktop/test",list="NPrun")
package.skeleton(name="test",list="NPrun",path="/Users/neely/Desktop/test")
NPrun
a <- function(x,y) x+y
package.skeleton(name="test",list="a",path="/Users/neely/Desktop/test")
package.skeleton(name="test",list="a",path="/Users/neely/Desktop/")
?writeClipboard
?dnorm
?plot
?plot.default
library(Pmetrics)
?Pmetrics
?NPrun
citation("Pmetrics")
packageDescription("Pmetrics")
?bibentry
library(nlme)
citation("nlme")
?citHeader
meta
meta$Date
names(meta)
vers
meta$Title
as.person("Michael Neely")
Sys.getenv()
?Rversion
??Rversion
?R.Version
R.version
getRversion()
getRversion()>"2.12.0"
citation("Pmetrics")
a <- citation("Pmetrics")
a
names(a)
?NPrun
log.axis
?log.axis
setwd("~/LAPK/R_NPAG/Pmetrics/R")
list.files(pattern="^[^x]")
data=op$post$pred
dat
data
y1
pow
labels
xtra
log.axis
labels
side=1
min(data)
pow
pretty(pow)
y1
pow
labels
data=op$post1
log.axis
data
data=op$post$pred
data
data
y1
installedVersion <- packageVersion("Pmetrics")
installedVersion
currentVersion <- NULL
!is.null(currentVersion) && (currentVersion > installedVersion
)
currentVersion <- 0
installedVersion <- 0
currentVersion > installedVersion
currentVersion <- 0
installedVersion <- 0
currentVersion <- package_version(suppressWarnings(
tryCatch(scan("http://www.lapk.org/PmetricsVersion.txt",what="character",quiet=T),
error = function(e) e <- 0)))
installedVersion <- packageVersion("Pmetrics")
currentVersion
installedVersion
currentVersion > installedVersion
predInt=list(c(0,48,1),c(96,144,1))
predInt
predInt[1]
predInt[1]>0
length(predInt)
a=1
length(a)
is.list(predInt)
is.list(1)
a=c(0,24,1)
is.list(a)
sapply(length(predInt))
sapply(predInt,length)
any(sapply(predInt,length)!=3)
numeqt=1
predTimes <- sapply(predInt,function(x) rep(seq(x[1],x[2],x[3]),each=numeqt))
predTimes
predInt
c(predTimes)
?readlines
?readLines
?readline
?stop
?exit
?next
makePmetrics <- function(fortranChange=F,build=T,pdf=F,check=F,buildData=NULL,parallel=T,
ITver,NPver,SIMver){
wd <- getwd()
require(devtools)
OS <- switch(.Platform$OS.type,unix=1,windows=2)
if(OS==1){
#do this only if fortran files have changed
if(fortranChange==T){
system("rm ~/LAPK/PmetricsSource/Pmetrics/inst/code/*.f")
setwd("~/LAPK/PmetricsSource/Source")
system(paste("cat ./IT2B/prep/*.* > ../Pmetrics/inst/code/ITprep_",ITver,".f",sep=""))
system(paste("cat ./IT2B/error/*.* > ../Pmetrics/inst/code/ITerr_",ITver,".f",sep=""))
system(paste("cat ./IT2B/engine/*.* > ../Pmetrics/inst/code/ITeng_",ITver,".f",sep=""))
system(paste("cat ./NPAG/prep/*.* > ../Pmetrics/inst/code/NPprep_",NPver,".f",sep=""))
system(paste("cat ./NPAG/engine/*.* > ../Pmetrics/inst/code/NPeng_",NPver,".f",sep=""))
file.copy(from=paste("./Simulator/engine/MONT",SIMver,".FOR",sep=""),to=paste("../Pmetrics/inst/code/SIMeng_",SIMver,".f",sep=""),overwrite=T)
#remove comment lines and clean up
rmComm <- function(files){
for (i in files){
system(paste("~/LAPK/PmetricsSource/Source/win2mac.sa",i))
file.remove(i)
file.rename("newfile.txt",i)
code <- readLines(i)
commLines <- grep("^C",code,ignore.case=T)
commLines2 <- grep("^\\*",code)
#these are for parallel coding
commLines3 <- grep("^![^\\$]",code)
if(length(commLines3)>0 & parallel==F){
allcomments <- c(commLines,commLines2,commLines3)
}else{allcomments <- c(commLines,commLines2)}
if(length(allcomments)>0) code <- code[-allcomments]
code <- code[code!=""]
writeLines(code,i,sep="\r\n")
}
}
setwd("~/LAPK/PmetricsSource/Pmetrics/inst/code")
rmComm(files=list.files())
setwd("~/LAPK/PmetricsSource/Pmetrics/inst/config")
writeLines("1","newFort.txt")
} else {
setwd("~/LAPK/PmetricsSource/Pmetrics/inst/config")
writeLines("0","newFort.txt")
}
#do this for all changes
setwd("~/LAPK/PmetricsSource")
document("Pmetrics")
if(pdf){
file.remove("./Pmetrics/inst/doc/Pmetrics-manual.pdf")
system("R CMD Rd2pdf --output=./Pmetrics/inst/doc/Pmetrics-manual.pdf --no-preview ./Pmetrics/man")
}
#write html changelog file
chlog <- readLines("Pmetrics/inst/NEWS.Rd")
delLines <- which(chlog=="")
chlog <- chlog[-delLines]
chlog <- chlog[-1]
chlog <- gsub("\\\\subsection\\{NEW FEATURES\\}\\{" ,"<h3>NEW FEATURES</h3>",chlog)
chlog <- gsub("\\\\subsection\\{BUG FIXES\\}\\{" ,"<h3>BUG FIXES</h3>",chlog)
chlog <- gsub("\\\\itemize\\{","<ul>",chlog)
items <- grep("\\\\item",chlog)
chlog[items] <- lapply(chlog[items],function(x) paste("<li>",substr(x,7,nchar(x)),"</li>",sep=""))
chlog <- gsub("\\\\section\\{Changes in version" ,"<h2 style='color:#222222'>Changes in version",chlog)
chlog <- gsub("\\}\\{" ,"</h2>",chlog)
chlog <- sub("^\\}","</ul>",chlog)
writeLines(chlog,"PMchangelog.html")
#build example datasets
#NPAG
if(buildData$npag){
setwd("~/LAPK/PmetricsSource/Test/NPAG")
file.copy(from=c("../src/model.txt","../src/ex.csv"),to=getwd(),overwrite=T)
NPrun(data="ex.csv",cycles=100,run=1,overwrite=T,intern=T)
PMload(1)
save(NPdata.1,final.1,cycle.1,op.1,cov.1,pop.1,post.1,mdata.1,file="~/LAPK/PmetricsSource/Pmetrics/data/PMex1.rda")
}
if(buildData$it2b){
#IT2B
setwd("~/LAPK/PmetricsSource/Test/IT2B")
file.copy(from=c("../src/model.txt","../src/ex.csv"),to=getwd(),overwrite=T)
ITrun(data="ex.csv",cycles=100,run=1,overwrite=T,intern=T)
PMload(1)
save(ITdata.1,final.1,cycle.1,op.1,cov.1,mdata.1,file="~/LAPK/PmetricsSource/Pmetrics/data/PMex2.rda")
}
if(buildData$baddata){
setwd("~/LAPK/PmetricsSource/Test")
badData <- PMreadMatrix("src/ex_bad.csv")
save(badData,file="~/LAPK/PmetricsSource/Pmetrics/data/PMex3.rda")
}
setwd("~/LAPK/PmetricsSource")
if(check) check("Pmetrics")
if(build){
build("Pmetrics",binary=T)
build("Pmetrics",binary=F)
}
install("Pmetrics")
#copy to repository
setwd("~/LAPK/PmetricsSource")
Rvers <- paste(version$major,substr(version$minor,1,1),sep=".")
#tar.gz
tools::write_PACKAGES(type="source")
file.remove(Sys.glob("Repos/src/contrib/Pmetrics*.tar.gz"))
file.copy(from=Sys.glob("Pmetrics*.tar.gz"),to="Repos/src/contrib")
file.copy(from=Sys.glob("Pmetrics*.tar.gz"),to="Archived")
file.copy(from="PACKAGES",to="Repos/src/contrib",overwrite=T)
file.remove(Sys.glob("Pmetrics*.tar.gz"))
#tgz
tools::write_PACKAGES(type="mac.binary")
macBinDir <- paste("Repos/bin/macosx/contrib/",Rvers,sep="")
if(!file.exists(macBinDir)){
dir.create(macBinDir)
}
file.remove(Sys.glob(paste(macBinDir,"Pmetrics*.tgz",sep="/")))
file.copy(from=Sys.glob("Pmetrics*.tgz"),to=macBinDir)
file.copy(from=Sys.glob("Pmetrics*.tgz"),to="Archived")
file.copy(from="PACKAGES",to=macBinDir,overwrite=T)
mavBinDir <- paste("Repos/bin/macosx/mavericks/contrib/",Rvers,sep="")
if(!file.exists(mavBinDir)){
dir.create(mavBinDir)
}
file.remove(Sys.glob(paste(mavBinDir,"Pmetrics*.tgz",sep="/")))
file.copy(from=Sys.glob("Pmetrics*.tgz"),to=mavBinDir)
file.copy(from="PACKAGES",to=mavBinDir,overwrite=T)
file.remove(Sys.glob("Pmetrics*.tgz"))
} else {  #this is for Windows
#do this for all changes
setwd("C:/LAPK/PmetricsSource")
if(build) build("Pmetrics",binary=T)
#copy to repository
setwd("C:/LAPK/PmetricsSource")
Rvers <- paste(version$major,substr(version$minor,1,1),sep=".")
#zip
tools::write_PACKAGES(type="win.binary")
winBinDir <- paste("Y:/LAPK/PmetricsSource/Repos/bin/windows/contrib/",Rvers,sep="")
if(!file.exists(winBinDir)){
dir.create(winBinDir)
}
file.remove(Sys.glob(paste(winBinDir,"Pmetrics*.zip",sep="/")))
file.copy(from=Sys.glob("Pmetrics*.zip"),to=winBinDir)
file.copy(from=Sys.glob("Pmetrics*.zip"),to="Y:/LAPK/PmetricsSource/Archived")
file.copy(from="PACKAGES",to=winBinDir,overwrite=T)
file.remove(Sys.glob("Pmetrics*.zip"))
}
setwd(wd)
}
makePmetrics(fortranChange=F,build=T,pdf=F,check=F,
buildData=list(npag=F,it2b=F,baddata=F),
ITver=26,NPver=30,SIMver="111")
