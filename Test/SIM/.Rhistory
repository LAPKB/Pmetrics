logfile <- url("http://www.lapk.org/test.txt",open="w+")
logfile <- url("http://www.lapk.org/test.txt",open="w+")
logfile <- file("http://www.lapk.org/test.txt",open="w+")
logfile <- ftp("http://www.lapk.org/test.txt",open="w+")
logfile <- url("file://www.lapk.org/test.txt",open="w+")
logfile <- url("http://www.lapk.org/test.txt",open="w+")
logfile <- url("http://www.lapk.org/test.txt",open="r+")
logfile
?writeLines
writeLines("test1",logfile)
close(logfile)
logfile <- url("http://www.lapk.org/test.txt",open="w+")
PMupdate
library(Pmetrics)
PMupdate
library(sendmailR)
?sendmail
sendmail(from="mneely@usc.edu",to="mnneely@usc.edu",subject="Pmetrics",msg="Downloaded")
Sys.info()
Sys.info()[4]
sprintf("<sendmailR@\\%s>", Sys.info()[4])
sendmail_options()
?.Call
library(Pmetrics)
?makePTA
install.packages(file.choose())
library(digitize)
?locator
?pairs
?require
install.packages
?install.packages
search()
if(!require(shiny))
if(!require(shiny)){cat("Not")}
a=require(shiny)
a
resp <- readlines("You do not have the required Shiny package. Download? ")
#' Learn Pmetrics R code with user friendly graphical interfaces in the default browser.
resp <- readline("You do not have the required Shiny package. Download? ")
remove.packages(shiny)
remove.packages("shiny")
library(shiny)
?shiny
?textInput
!require(shiny)
require(shiny)
b=require(shiny)
b
search
search()
remove.packages("shiny")
install.packages(file.choose()
)
?install.packages
install.packages(file.choose()
)
install.packages(file.choose())
library(Pmetrics)
citation()
library(Pmetrics)
?NPrun
file_list <- list.files("CRANlogs", full.names=TRUE)
logs <- list()
for (file in file_list) {
print(paste("Reading", file, "..."))
logs[[file]] <- read.table(file, header = TRUE, sep = ",", quote = "\"",
dec = ".", fill = TRUE, comment.char = "", as.is=TRUE)
}
library(data.table)
dat <- rbindlist(logs)
logs <- logs[[1:161]]
length(logs)
logs <- logs[[-162]]
logs <- logs[-162]
length(logs)
library(data.table)
dat <- rbindlist(logs)
save(dat, file="CRANlogs/CRANlogs.RData")
?setkey
?":="
dat[, date:=as.Date(date)]
dat[, package:=factor(package)]
dat[, country:=factor(country)]
dat[, weekday:=weekdays(date)]
dat[, week:=strftime(as.POSIXlt(date),format="%Y-%W")]
setkey(dat, package, date, week, country)
save(dat, file="CRANlogs/CRANlogs.RData")
library(ggplot2)
library(plyr)
str(dat)
d1 <- dat[, length(week), by=package]
d1 <- d1[order(V1), ]
d1[package=="ggplot", ]
agg1 <- dat[J(c("TripleR", "RSA")), length(unique(ip_id)), by=c("week", "package")]
ggplot(agg1, aes(x=week, y=V1, color=package, group=package)) + geom_line() + ylab("Downloads") + theme_bw() + theme(axis.text.x  = element_text(angle=90, size=8, vjust=0.5))
head(d1)
agg1 <- dat[J(c("ggplot", "TripleR", "RSA")), length(unique(ip_id)), by=c("week", "package")]
ggplot(agg1, aes(x=week, y=V1, color=package, group=package)) + geom_line() + ylab("Downloads") + theme_bw() + theme(axis.text.x  = element_text(angle=90, size=8, vjust=0.5))
d1[package=="psych", ]
?ggplot
df <- data.frame(gp = factor(rep(letters[1:3], each = 10)),
y = rnorm(30))
ds <- ddply(df, .(gp), summarise, mean = mean(y), sd = sd(y))
ggplot(df, aes(x = gp, y = y)) +
geom_point() +
geom_point(data = ds, aes(y = mean),
colour = 'red', size = 3)
ggplot(df, aes(x = gp, y = y))  +
geom_point(data = ds, aes(y = mean),
colour = 'red', size = 3)
ds
?ddply
?summarise
.summarise(df)
summarise(df)
summarise(df,mean=mean)
df
summarise(df,mean=mean(y))
summarise(df,mean=mean(y),sd=sd(y))
?summarize
summarize(df,mean=mean(y))
?ggplot
ggplot(df, aes(x = gp, y = y)) +
geom_point() +
geom_line(data = ds, aes(y = mean),
colour = 'red', size = 3)
ggplot(df, aes(x = gp, y = y)) +
geom_point() +
geom_line(data = ds, aes(y = mean),
colour = 'red')
ds
ggplot(df, aes(x = gp, y = y)) +
geom_point() +
geom_line(data = ds, aes(x = gp,y = mean),
colour = 'red')
mry <- do.call(rbind, by(movies, round(movies$rating), function(df) {
nums <- tapply(df$length, df$year, length)
data.frame(rating=round(df$rating[1]), year = as.numeric(names(nums)), number=as.vector(nums))
}))
mry
p <- ggplot(mry, aes(x=year, y=number, group=rating))
p + geom_line()
ds <- ddply(df, .(gp), summarise, mean = mean(y), sd = sd(y))
ggplot(df, aes(x = gp, y = y)) +
geom_point() +
geom_line(data = ds, aes(y = mean),
colour = 'red')
ds <- ddply(df, .(gp), summarise, mean = mean(y), sd = sd(y))
ggplot(df, aes(x = gp, y = y)) +
geom_point() +
geom_point(data = ds, aes(y = mean),
colour = 'red')
?qgrowth
library(Pmetrics)
?qgrowth
qgrowth("B","50")
qgrowth("B","50","90")
qgrowth("B","50",90)
qgrowth("B",90)
qgrowth("B","90")
library("MTSKNN")
?mtsknn
library(R2HTML)
?HTML
library(Pmetrics)
PMupdate()
library(Pmetrics)
PMmanual()
library(Pmetrics)
setwd("~/LAPK/Pmetrics")
PMtree("Meropenem")
install.packages(file.choose())
library(Pmetrics)
PMupdate()
search()
detach(2)
library(Pmetrics)
PMbuild()
library(Pmetrics)
library(BestDose)
?bestdose
library(Pmetrics)
?PMfortranConfig
??fortran
PMFortranConfig
getwd()
library(Pmetrics)
PMtree("Etravirine")
makePmetrics <- function(fortranChange=F,build=T,pdf=F,check=F,buildData=NULL,
ITver,NPver,SIMver){
require(devtools)
OS <- switch(.Platform$OS.type,unix=1,windows=2)
if(OS==1){
#do this only if fortran files have changed
if(fortranChange==T){
system("rm ~/LAPK/PmetricsSource/Pmetrics/inst/code/*.f")
setwd("~/LAPK/PmetricsSource/Source")
system(paste("cat ./IT2B/prep/*.* > ../Pmetrics/inst/code/ITprep_",ITver,".f",sep=""))
system(paste("cat ./IT2B/error/*.* > ../Pmetrics/inst/code/ITerr_",ITver,".f",sep=""))
system(paste("cat ./IT2B/engine/*.* > ../Pmetrics/inst/code/ITeng_",ITver,".f",sep=""))
system(paste("cat ./NPAG/prep/*.* > ../Pmetrics/inst/code/NPprep_",NPver,".f",sep=""))
system(paste("cat ./NPAG/engine/*.* > ../Pmetrics/inst/code/NPeng_",NPver,".f",sep=""))
file.copy(from=paste("./Simulator/engine/MONT",SIMver,".FOR",sep=""),to=paste("../Pmetrics/inst/code/SIMeng_",SIMver,".f",sep=""),overwrite=T)
#remove comment lines and clean up
rmComm <- function(files){
for (i in files){
system(paste("~/LAPK/PmetricsSource/Source/win2mac.sa",i))
file.remove(i)
file.rename("newfile.txt",i)
code <- readLines(i)
commLines <- grep("^C",code,ignore.case=T)
commLines2 <- grep("^\\*",code)
if(length(commLines2)>0) {code <- code[-c(commLines,commLines2)]} else {code <- code[-commLines]}
code <- code[code!=""]
#longlines <- grep(".{61}",code)
#for(j in longlines){
#code[j] <- paste(substring(code[j],1,60),substring(code[j],61),sep="\n     &  ")
#}
writeLines(code,i,sep="\r\n")
}
}
setwd("~/LAPK/PmetricsSource/Pmetrics/inst/code")
rmComm(files=list.files())
setwd("~/LAPK/PmetricsSource/Pmetrics/inst/config")
writeLines("1","newFort.txt")
} else {
setwd("~/LAPK/PmetricsSource/Pmetrics/inst/config")
writeLines("0","newFort.txt")
}
#do this for all changes
setwd("~/LAPK/PmetricsSource")
document("Pmetrics")
if(pdf){
file.remove("./Pmetrics/inst/doc/Pmetrics-manual.pdf")
system("R CMD Rd2pdf --output=./Pmetrics/inst/doc/Pmetrics-manual.pdf --no-preview ./Pmetrics/man")
}
#build example datasets
#NPAG
if(buildData$npag){
setwd("~/LAPK/PmetricsSource/Test/NPAG")
file.copy(from=c("../src/model.txt","../src/ex.csv"),to=getwd(),overwrite=T)
NPrun(data="ex.csv",cycles=100,run=1,overwrite=T,intern=T)
PMload(1)
save(NPdata.1,final.1,cycle.1,op.1,cov.1,pop.1,post.1,mdata.1,file="~/LAPK/PmetricsSource/Pmetrics/data/PMex1.rda")
}
if(buildData$it2b){
#IT2B
setwd("~/LAPK/PmetricsSource/Test/IT2B")
file.copy(from=c("../src/model.txt","../src/ex.csv"),to=getwd(),overwrite=T)
ITrun(data="ex.csv",cycles=100,run=1,overwrite=T,intern=T)
PMload(1)
save(ITdata.1,final.1,cycle.1,op.1,cov.1,mdata.1,file="~/LAPK/PmetricsSource/Pmetrics/data/PMex2.rda")
}
if(buildData$baddata){
setwd("~/LAPK/PmetricsSource/Test")
badData <- PMreadMatrix("src/ex_bad.csv")
save(badData,file="~/LAPK/PmetricsSource/Pmetrics/data/PMex3.rda")
}
setwd("~/LAPK/PmetricsSource")
if(check) check("Pmetrics")
if(build){
build("Pmetrics",binary=T)
build("Pmetrics",binary=F)
}
install("Pmetrics")
} else {  #this is for Windows
#do this for all changes
setwd("C:/LAPK/PmetricsSource")
if(build) build("Pmetrics",binary=T)
}
}
makePmetrics(fortranChange=T,build=T,pdf=F,check=F,
buildData=list(npag=F,it2b=F,baddata=F),
ITver=23,NPver=24,SIMver="108")
PMbuild()
remove.packages("npde")
packages <- packageDescription("Pmetrics")$Suggests
packages
packages <- gsub("\n","",packages)
packages <- unlist(strsplit(packages,","))
packages
for(i in packages){
if(length(system.file(package=i))==0){
if(length(getOption("repos")==0)) {setRepositories()}
install.packages(i,repos=getOption("repos"),dependencies=T)
}
}
i
i="npde"
system.file(package=i)
length(system.file(package=i))
system.file(package="jdkfj")
getOption("repos")
for(i in packages){
if(system.file(package=i)==""){
if(getOption("repos")=="") {setRepositories()}
install.packages(i,repos=getOption("repos"),dependencies=T)
}
}
i
i="npde"
system.file(package=i)
library(npde)
?library
search()
detach(2)
library(npde,quietly=T)
setwd("~/LAPK/PmetricsSource/Test/NPAG")
library(Pmetrics)
setwd("~/LAPK/PmetricsSource/Test/NPAG")
PMload(1)
setwd("~/LAPK/PmetricsSource/Test/SIM")
file.copy(from=c("../src/model.txt","../src/ex1.csv"),to=getwd(),overwrite=T)
file.copy(from=c("../src/model.txt","../src/ex.csv"),to=getwd(),overwrite=T)
SIMrun(poppar=final.1,data="ex1.csv",nsim=0,split=T,include=1,limits=NA,predInt=0.25,obsNoise=c(0,0,0,0),clean=F)
?switch
prior=NPdata.1
is.character(prior)
is.numeric(prior)
class(piror)
class(prior)
length(prior)
prior[1]
?Sys.glob
?dirbase
?filename
??base
makePmetrics <- function(fortranChange=F,build=T,pdf=F,check=F,buildData=NULL,
ITver,NPver,SIMver){
require(devtools)
OS <- switch(.Platform$OS.type,unix=1,windows=2)
if(OS==1){
#do this only if fortran files have changed
if(fortranChange==T){
system("rm ~/LAPK/PmetricsSource/Pmetrics/inst/code/*.f")
setwd("~/LAPK/PmetricsSource/Source")
system(paste("cat ./IT2B/prep/*.* > ../Pmetrics/inst/code/ITprep_",ITver,".f",sep=""))
system(paste("cat ./IT2B/error/*.* > ../Pmetrics/inst/code/ITerr_",ITver,".f",sep=""))
system(paste("cat ./IT2B/engine/*.* > ../Pmetrics/inst/code/ITeng_",ITver,".f",sep=""))
system(paste("cat ./NPAG/prep/*.* > ../Pmetrics/inst/code/NPprep_",NPver,".f",sep=""))
system(paste("cat ./NPAG/engine/*.* > ../Pmetrics/inst/code/NPeng_",NPver,".f",sep=""))
file.copy(from=paste("./Simulator/engine/MONT",SIMver,".FOR",sep=""),to=paste("../Pmetrics/inst/code/SIMeng_",SIMver,".f",sep=""),overwrite=T)
#remove comment lines and clean up
rmComm <- function(files){
for (i in files){
system(paste("~/LAPK/PmetricsSource/Source/win2mac.sa",i))
file.remove(i)
file.rename("newfile.txt",i)
code <- readLines(i)
commLines <- grep("^C",code,ignore.case=T)
commLines2 <- grep("^\\*",code)
if(length(commLines2)>0) {code <- code[-c(commLines,commLines2)]} else {code <- code[-commLines]}
code <- code[code!=""]
#longlines <- grep(".{61}",code)
#for(j in longlines){
#code[j] <- paste(substring(code[j],1,60),substring(code[j],61),sep="\n     &  ")
#}
writeLines(code,i,sep="\r\n")
}
}
setwd("~/LAPK/PmetricsSource/Pmetrics/inst/code")
rmComm(files=list.files())
setwd("~/LAPK/PmetricsSource/Pmetrics/inst/config")
writeLines("1","newFort.txt")
} else {
setwd("~/LAPK/PmetricsSource/Pmetrics/inst/config")
writeLines("0","newFort.txt")
}
#do this for all changes
setwd("~/LAPK/PmetricsSource")
document("Pmetrics")
if(pdf){
file.remove("./Pmetrics/inst/doc/Pmetrics-manual.pdf")
system("R CMD Rd2pdf --output=./Pmetrics/inst/doc/Pmetrics-manual.pdf --no-preview ./Pmetrics/man")
}
#build example datasets
#NPAG
if(buildData$npag){
setwd("~/LAPK/PmetricsSource/Test/NPAG")
file.copy(from=c("../src/model.txt","../src/ex.csv"),to=getwd(),overwrite=T)
NPrun(data="ex.csv",cycles=100,run=1,overwrite=T,intern=T)
PMload(1)
save(NPdata.1,final.1,cycle.1,op.1,cov.1,pop.1,post.1,mdata.1,file="~/LAPK/PmetricsSource/Pmetrics/data/PMex1.rda")
}
if(buildData$it2b){
#IT2B
setwd("~/LAPK/PmetricsSource/Test/IT2B")
file.copy(from=c("../src/model.txt","../src/ex.csv"),to=getwd(),overwrite=T)
ITrun(data="ex.csv",cycles=100,run=1,overwrite=T,intern=T)
PMload(1)
save(ITdata.1,final.1,cycle.1,op.1,cov.1,mdata.1,file="~/LAPK/PmetricsSource/Pmetrics/data/PMex2.rda")
}
if(buildData$baddata){
setwd("~/LAPK/PmetricsSource/Test")
badData <- PMreadMatrix("src/ex_bad.csv")
save(badData,file="~/LAPK/PmetricsSource/Pmetrics/data/PMex3.rda")
}
setwd("~/LAPK/PmetricsSource")
if(check) check("Pmetrics")
if(build){
build("Pmetrics",binary=T)
build("Pmetrics",binary=F)
}
install("Pmetrics")
} else {  #this is for Windows
#do this for all changes
setwd("C:/LAPK/PmetricsSource")
if(build) build("Pmetrics",binary=T)
}
}
makePmetrics(fortranChange=F,build=T,pdf=F,check=F,
buildData=list(npag=F,it2b=F,baddata=F),
ITver=23,NPver=24,SIMver="108")
setwd("~/LAPK/PmetricsSource/Test/NPAG")
NPrun(data=1,model=1,prior=1)
makePmetrics(fortranChange=F,build=T,pdf=F,check=F,
buildData=list(npag=F,it2b=F,baddata=F),
ITver=23,NPver=24,SIMver="108")
setwd("~/LAPK/PmetricsSource/Test/NPAG")
NPrun(data=1,model=1,prior=1)
is.numeric(1)
debugSource('~/LAPK/PmetricsSource/Pmetrics/R/PMrun.R')
setwd("~/LAPK/PmetricsSource/Test/NPAG")
NPrun(data=1,model=1,prior=1)
prior=1
if(is.null(prior)) {  #prior not specified
prior <- -99
priorName <- 1
}
if(inherits(prior,"NPAG")){priorName <- c(0,"prior.txt")} #prior is an NPdata object
if(is.character(prior)) {priorName <- c(0,prior)}  #prior is the name of a file
if(is.numeric(prior)){  #prior is a run number
prior <- Sys.glob(paste(data,"outputs/DEN*",sep="/"))[1]
if(length(prior)>0){
file.copy(from=prior,to=getwd())
priorName <- c(0,basename(prior))
}
}
prior
is.null(prior)
inherits(prior,"NPAG")
is.character(prior)
is.numeric(prior)
prior <- Sys.glob(paste(data,"outputs/DEN*",sep="/"))[1]
paste(data,"outputs/DEN*",sep="/")
Sys.glob(paste(prior,"outputs/DEN*",sep="/"))[1]
if(is.null(prior)) {  #prior not specified
prior <- -99
priorName <- 1
}
if(inherits(prior,"NPAG")){priorName <- c(0,"prior.txt")} #prior is an NPdata object
if(is.character(prior)) {priorName <- c(0,prior)}  #prior is the name of a file
if(is.numeric(prior)){  #prior is a run number
prior <- Sys.glob(paste(prior,"outputs/DEN*",sep="/"))[1]
if(length(prior)>0){
file.copy(from=prior,to=getwd())
priorName <- c(0,basename(prior))
}
}
priorName
prior
makePmetrics(fortranChange=F,build=T,pdf=F,check=F,
buildData=list(npag=F,it2b=F,baddata=F),
ITver=23,NPver=24,SIMver="108")
setwd("~/LAPK/PmetricsSource/Test/NPAG")
NPrun(data=1,model=1,prior=1)
setwd("~/LAPK/PmetricsSource/Test/SIM")
file.copy(from=c("../src/model.txt","../src/ex.csv"),to=getwd(),overwrite=T)
SIMrun(poppar=final.1,data="ex1.csv",nsim=0,split=T,include=1,limits=NA,predInt=0.25,obsNoise=c(0,0,0,0),clean=F)
makePmetrics(fortranChange=F,build=T,pdf=F,check=F,
buildData=list(npag=F,it2b=F,baddata=F),
ITver=23,NPver=24,SIMver="108")
setwd("~/LAPK/PmetricsSource/Test/SIM")
file.copy(from=c("../src/model.txt","../src/ex.csv"),to=getwd(),overwrite=T)
SIMrun(poppar=final.1,data="ex1.csv",nsim=0,split=T,include=1,limits=NA,predInt=0.25,obsNoise=c(0,0,0,0),clean=F)
simdata1 <- SIMparse("simout1.txt")
plot(simdata1,log=F)
simdata
simdata1
final.1$popPoints
allfiles="simout1.txt"
out <- readLines(allfiles[n])
n=1
out <- readLines(allfiles[n])
nsim <- as.numeric(strparse("[[:digit:]]+",out[grep(" THE NO. OF SIMULATED SUBJECTS",out)]))
nout <- as.numeric(strparse("[[:digit:]]+",out[grep(" THE NO. OF OUTPUT EQUATIONS",out)]))
nobs <- as.numeric(strparse("[[:digit:]]+",out[grep(" VALUES FOR EACH OUTPUT EQUATION",out)]))
nsim
i<-grep("PARAMETER VALUES FOR ALL THE SUBJECTS.",out)
i<-grep("BECAUSE OF PARAMETER BOUNDARY RESTRICTIONS",out)
length(i)>0
i
totalSets <- as.numeric(scan(allfiles[1],what="character",skip=i,nlines=1,quiet=T,strip.white=T)[1])
totalSets
out[i]
file.copy(from=c("../src/model.txt","../src/ex.csv"),to=getwd(),overwrite=T)
setwd("~/LAPK/PmetricsSource/Test/SIM")
file.copy(from=c("../src/model.txt","../src/ex.csv"),to=getwd(),overwrite=T)
SIMrun(poppar=final.1,data="ex1.csv",nsim=1,split=T,include=1,limits=NA,predInt=0.25,obsNoise=c(0,0,0,0),clean=F)
simdata1 <- SIMparse("simout1.txt")
plot(simdata1,log=F)
SIMrun(poppar=final.1,data="ex1.csv",nsim=10,split=T,include=1,limits=NA,predInt=0.25,obsNoise=c(0,0,0,0),clean=F)
simdata1 <- SIMparse("simout1.txt")
simdata <- SIMparse("simout?.txt")
plot(simdata1,log=F)
SIMrun(poppar=final.1,data="ex1.csv",nsim=0,split=T,include=1,limits=NA,predInt=0.25,obsNoise=c(0,0,0,0),clean=F)
simdata1 <- SIMparse("simout1.txt")
simdata <- SIMparse("simout?.txt")
plot(simdata1,log=F)
simdata
simdata$totalSets
