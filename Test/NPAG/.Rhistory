str(dailyDoseKg)
length(dailyDoseKg)
dailyDoseKg <- by(Doses,list(Doses$id,dates(Doses$dt)),function(x) sum(x$doseKg,na.rm=T))
dailyDoseKg[[1]]
dailyDoseKg[1]
dailyDoseKg[1,]
dailyDoseKg[,1]
dim(dailyDoseList)
dim(dailyDoseKg)
apply(dailyDoseKg,1,function(x) mean(x,na.rm=T))
dailyDoseKg <- by(Doses,list(Doses$id,dates(Doses$dt)),function(x) sum(x$doseKg,na.rm=T))
dailyDoseKg <- list(dailyDoseKg)
dailyDoseKg <- apply(dailyDoseKg,1,function(x) mean(x,na.rm=T))
dailyDoseKg <- by(Doses,list(Doses$id,dates(Doses$dt)),function(x) sum(x$doseKg,na.rm=T))
dailyDoseKg <- apply(dailyDoseKg,1,function(x) mean(x,na.rm=T))
names(dailyDoseKg)
daily <- data.frame(id=names(dailyDoseKg),dose=dailyDoseKg)
dailyDoseKg <- by(Doses,list(Doses$id,dates(Doses$dt)),function(x) sum(x$doseKg,na.rm=T))
dailyDoseKg <- apply(dailyDoseKg,1,function(x) mean(x,na.rm=T))
daily <- data.frame(id=names(dailyDoseKg),dose=dailyDoseKg)
daily$year <- ifelse(daily$id<200,1,2)
daily$year <- ifelse(daily$id>=300,3,daily$year)
dailyDoseKg <- by(Doses,list(Doses$id,dates(Doses$dt)),function(x) sum(x$doseKg,na.rm=T))
dailyDoseKg <- apply(dailyDoseKg,1,function(x) mean(x,na.rm=T))
daily <- data.frame(id=as.numeric(names(dailyDoseKg)),dose=dailyDoseKg)
daily$year <- ifelse(daily$id<200,1,2)
daily$year <- ifelse(daily$id>=300,3,daily$year)
daily
brkdn(dose~year,daily)
chisq.test(table(daily$dose,daily$year))
summary(aov(dose~year,daily))
brkdn(dose~year,daily)
save.image("~/Documents/Research and Grants/GMS 2011/Vancomycin/Data/Analysis.RData")
load("~/Documents/Research and Grants/GMS 2011/Vancomycin/Data/Analysis.RData")
vinc
lr.3 <- glm(neurotox~log10(m1vct),vinc[vinc$drug=="VCT" & vinc$m1vct!=0,],family="binomial")
summary(lr.3)
lr.4 <- glm(neurotox~log10(m2vct),vinc[vinc$drug=="VCT" & vinc$m2vct!=0,],family="binomial")
summary(lr.4)
lr.5 <- glm(neurotox~log10(m1m2),vinc[vinc$drug=="VCT" & vinc$m1m2!=0,],family="binomial")
summary(lr.5)
head(vinc)
wilcox.test(m1vct~neurotox,vinc[vinc$drug=="VCT",])
wilcox.test(m2vct~neurotox,vinc[vinc$drug=="VCT",])
wilcox.test(m1m2~neurotox,vinc[vinc$drug=="VCT",])
brkdn(m1vct~neurotox,vinc[vinc$drug=="VCT",])
brkdn(m2vct~neurotox,vinc[vinc$drug=="VCT",])
brkdn(m1m2~neurotox,vinc[vinc$drug=="VCT",])
brkdn(m1m2~age<12,vinc[vinc$drug=="VCT",])
brkdn(m1m2~puberty,vinc[vinc$drug=="VCT",])
brkdn(m1vct~puberty,vinc[vinc$drug=="VCT",])
brkdn(m2vct~puberty,vinc[vinc$drug=="VCT",])
brkdn(m1m2~puberty,vinc[vinc$drug=="VCT",])
brkdn(m1vct~age<12,vinc[vinc$drug=="VCT",])
brkdn(m2vct~age<12,vinc[vinc$drug=="VCT",])
head(vinc)
lr.3 <- glm(neurotox~m1vct+age,vinc[vinc$drug=="VCT" & vinc$m1vct!=0,],family="binomial")
summary(lr.3)
lr.3 <- glm(neurotox~m1vct+puberty,vinc[vinc$drug=="VCT" & vinc$m1vct!=0,],family="binomial")
summary(lr.3)
brkdn(m1vct~neurotox,vinc[vinc$drug=="VCT",])
brkdn(m1vct~puberty,vinc[vinc$drug=="VCT",])
lr.3 <- glm(neurotox~m1vct+puberty,vinc[vinc$drug=="VCT" & vinc$m1vct!=0,],family="binomial")
lr.3 <- glm(neurotox~m1vct+puberty,vinc[vinc$drug=="VCT" & vinc$m1vct!=0,],family="binomial")
summary(lr.3)
lr.4 <- glm(neurotox~m2vct+puberty,vinc[vinc$drug=="VCT" & vinc$m2vct!=0,],family="binomial")
summary(lr.4)
lr.3 <- glm(neurotox~m1vct*puberty,vinc[vinc$drug=="VCT" & vinc$m1vct!=0,],family="binomial")
summary(lr.3)
lr.4 <- glm(neurotox~m2vct*puberty,vinc[vinc$drug=="VCT" & vinc$m2vct!=0,],family="binomial")
summary(lr.4)
lr.5 <- glm(neurotox~m1m2+puberty),vinc[vinc$drug=="VCT" & vinc$m1m2!=0,],family="binomial")
lr.5 <- glm(neurotox~m1m2+puberty,vinc[vinc$drug=="VCT" & vinc$m1m2!=0,],family="binomial")
summary(lr.5)
vinc$m1vct
lr.3 <- glm(neurotox~m1vct+puberty,vinc[vinc$drug=="VCT" & vinc$m1vct!=0.001,],family="binomial")
summary(lr.3)
lr.3 <- glm(neurotox~m1vct+puberty,vinc[vinc$drug=="VCT",],family="binomial")
summary(lr.3)
lr.4 <- glm(neurotox~m2vct+puberty,vinc[vinc$drug=="VCT",],family="binomial")
summary(lr.4)
lr.4 <- glm(neurotox~puberty,vinc[vinc$drug=="VCT",],family="binomial")
summary(lr.4)
lr.4 <- glm(neurotox~m2vct+puberty,vinc[vinc$drug=="VCT",],family="binomial")
lr.6 <- glm(neurotox~auc+puberty,vinc[vinc$drug=="VCT",],family="binomial")
summary(lr.6)
lr.7 <- glm(neurotox~auc+puberty,vinc[vinc$drug=="M1",],family="binomial")
summary(lr.7)
lr.8 <- glm(neurotox~auc+puberty,vinc[vinc$drug=="M2",],family="binomial")
summary(lr.8)
chi.1 <- chisq.test(vinc$neurotox,vinc$puberty)
prop.table(table(vinc$neurotox,vinc$puberty,dnn=c("neurotox","puberty")),2)
chi.1  #this is highly significant but confounded by non-random enrollment
#sex and tox
chi.2 <- chisq.test(vinc$neurotox,vinc$male)
prop.table(table(vinc$neurotox,vinc$male,dnn=c("neurotox","male")),2)
chi.2
lr.9 <- glm(neurotox~CLkg+puberty,vinc[vinc$drug=="VCT",],family="binomial")
summary(lr.9)
lr.10 <- glm(neurotox~CLkg+puberty+antifungal,vinc[vinc$drug=="VCT",],family="binomial")
summary(lr.10)
lr.11 <- glm(neurotox~m1vct+puberty,vinc[vinc$drug=="VCT",],family="binomial")
summary(lr.11)
lr.12 <- glm(neurotox~m1vct+puberty+antifungal,vinc[vinc$drug=="VCT",],family="binomial")
summary(lr.12)
#auc and puberty
plot(auc~puberty,vinc[vinc$drug=="VCT",],log="y")
plot(auc~puberty,vinc[vinc$drug=="M1",],log="y")
plot(m1vct~puberty,vinc[vinc$drug=="VCT",],log="y")
plot(m2vct~puberty,vinc[vinc$drug=="VCT",],log="y")
plot(m1m2~puberty,vinc[vinc$drug=="VCT",],log="y")
# PK ----------------------------------------------------------------------
vincPK <- read.xls("Plasma VCR Data May18SGL.xlsx",2)
setwd("~/Documents/Research and Grants/Vincristine/Data")
vincPK <- read.xls("Plasma VCR Data May18SGL.xlsx",2)
names(vincPK) <- c("id","time","vct","m1","m2","wt","ht",
"male","neurotox","puberty","dosebsa","dosemg","antifungal")
vincPK$id <- as.numeric(substr(vincPK$id,1,2))
plot(vct~time,vincPK,log="y")
library(ggplot2)
library(scales)
# ggplot2 version:
# scales = 'free_y' allows independent y scales per panel
g <- ggplot(vincPK, aes(x = time, y = vct,group = id, log="y"))
g + geom_point() + geom_line() + scale_y_log10()
aucNC <- makeAUC(vincPK[!is.na(vincPK$time),],vct~time)
g <- ggplot(vincPK, aes(x = time, y = m1,group = id, log="y"))
g + geom_point() + geom_line() + scale_y_log10()
?plot.PMsim
library(Pmetrics)
?plot.PMsim
setwd("~/LAPK/PmetricsSource/Test/NPAG")
PMload(1)
library(shiny)
setwd("~/LAPK/PmetricsSource/Test/SIM")
setwd("~/LAPK/PmetricsSource/Test/NPAG")
npde.1=makeNPDE(1)
runApp("plot")
list.files()
setwd("../..")
list.files()
setwd("Test")
list.files()
runApp("plot")
op.1=makeOP(NPdata.1)
setwd("~/LAPK/PmetricsSource/Test/NPAG")
PMsave(1)
plot(sim.1)
plot(sim.1,obs=op.1)
runApp("plot")
?radioButtons
runApp("plot")
head(op.1)
runApp("plot")
View(pop.1)
OPFilter <- function(x) any(grepl("^PMop",class(get(x))))
OPchoices <- Filter(OPFilter,ls(globalenv()))
OPchoices
if(length(OPchoices)==0){OPchoices <- "None"} else {OPchoices <- c("None",OPchoices)}
OPchoices
runApp("plot")
runApp("plot")
runApp("plot")
runApp("plot")
runApp("plot")
runApp("plot")
runApp("plot")
?selectInput
runApp("plot")
runApp("plot")
?numericInput
runApp("plot")
runApp("plot")
runApp("plot")
runApp("plot")
runApp("plot")
library(BestDose) #load BestDose into memory
setwd("~/LAPK/BestDose/Busulfan/Patients/4099110")  #put  the folder path that has the patient files between the quotes
setwd("~/LAPK/BestDose/Busulfan/Patients/4099110")  #put  the folder path that has the patient files between the quotes
#Run 1 - forecast  dose 3
bd1 <- bestdose("busulfan",optimize=F,past="pdata2.csv",future="fdata3.csv",
nextdose="5/19/16 16:00",dose=4.4,auc=T,idelta=15,cycles=300)
bd1 <- bestdose("busulfan",optimize=T,past="pdata2.csv",future="fdata3.csv",
nextdose="5/19/16 16:00",dose=6,auc=T,idelta=15,prior=1)
bd1 <- bestdose("busulfan",optimize=F,past="pdata2.csv",future="fdata3.csv",
nextdose="5/19/16 16:00",dose=6,auc=T,idelta=15,prior=1)
?grepl
setwd("~/LAPK/PmetricsSource/Test/NPAG")
runApp("plot")
predFilter <- function(x) any(grepl("^PMpop | PMpost",class(get(x))))
predchoices <- Filter(predFilter,ls(globalenv()))
predchoices
predFilter
predFilter <- function(x) any(grepl("^PMpop|^PMpost",class(get(x))))
predchoices <- Filter(predFilter,ls(globalenv()))
predchoices
runApp("plot")
runApp("plot")
names(final.1)
final.1=makeFinal(NPdata.1)
names(final.1)
?makeFinal
str(final.1$postCov)
head(final.1$postCov)
final.1$postCov
dim(final.1$postCov)
final.1$postVar
names(final.1)
makePmetrics <- function(fortranChange=F,build=T,pdf=F,check=F,buildData=NULL,parallel=T,
ITver,NPver,SIMver,DOPTver,MBver){
wd <- getwd()
require(devtools)
OS <- switch(.Platform$OS.type,unix=1,windows=2)
if(OS==1){
#do this only if fortran files have changed
if(fortranChange==T){
#remove old files
system("rm ~/LAPK/PmetricsSource/Pmetrics/inst/code/*.f")
setwd("~/LAPK/PmetricsSource/Source")
#copy source files to inst/code
system(paste("cat ./IT2B/prep/*.* > ../Pmetrics/inst/code/ITprep_",ITver,".f",sep=""))
system(paste("cat ./IT2B/error/*.* > ../Pmetrics/inst/code/ITerr_",ITver,".f",sep=""))
system(paste("cat ./IT2B/engine/*.* > ../Pmetrics/inst/code/ITeng_",ITver,".f",sep=""))
system(paste("cat ./NPAG/prep/*.* > ../Pmetrics/inst/code/NPprep_",NPver,".f",sep=""))
system(paste("cat ./NPAG/engine/*.* > ../Pmetrics/inst/code/NPeng_",NPver,".f",sep=""))
file.copy(from=paste("./Simulator/engine/MONT",SIMver,".FOR",sep=""),to=paste("../Pmetrics/inst/code/SIMeng_",SIMver,".f",sep=""),overwrite=T)
system(paste("cat ./DOPT/prep/*.* > ../Pmetrics/inst/code/DOprep_",DOPTver,".f",sep=""))
system(paste("cat ./DOPT/engine/*.* > ../Pmetrics/inst/code/DOeng_",DOPTver,".f",sep=""))
system(paste("cat ./MB2CSV/*.* > ../Pmetrics/inst/code/mb2csv_",MBver,".f",sep=""))
#remove comment lines and clean up
rmComm <- function(files){
for (i in files){
system(paste("~/LAPK/PmetricsSource/Source/win2mac.sa",i))
file.remove(i)
file.rename("newfile.txt",i)
code <- readLines(i)
commLines <- grep("^C",code,ignore.case=T)
commLines2 <- grep("^\\*",code)
#these are for parallel coding
commLines3 <- grep("^![^\\$]",code)
if(length(commLines3)>0 & parallel==F){
allcomments <- c(commLines,commLines2,commLines3)
}else{allcomments <- c(commLines,commLines2)}
if(length(allcomments)>0) code <- code[-allcomments]
code <- code[code!=""]
writeLines(code,i,sep="\r\n")
}
}
setwd("~/LAPK/PmetricsSource/Pmetrics/inst/code")
rmComm(files=list.files())
setwd("~/LAPK/PmetricsSource/Pmetrics/inst/config")
writeLines("1","newFort.txt")
} else {
setwd("~/LAPK/PmetricsSource/Pmetrics/inst/config")
writeLines("0","newFort.txt")
}
#do this for all changes
setwd("~/LAPK/PmetricsSource")
document("Pmetrics")
if(pdf){
file.remove("./Pmetrics/inst/doc/Pmetrics-manual.pdf")
system("R CMD Rd2pdf --output=./Pmetrics/inst/doc/Pmetrics-manual.pdf --no-preview ./Pmetrics/man")
}
#write html changelog file
chlog <- readLines("Pmetrics/inst/NEWS.Rd")
delLines <- which(chlog=="")
chlog <- chlog[-delLines]
chlog <- chlog[-1]
chlog <- gsub("\\\\subsection\\{NEW FEATURES\\}\\{" ,"<h3>NEW FEATURES</h3>",chlog)
chlog <- gsub("\\\\subsection\\{BUG FIXES\\}\\{" ,"<h3>BUG FIXES</h3>",chlog)
chlog <- gsub("\\\\itemize\\{","<ul>",chlog)
items <- grep("\\\\item",chlog)
chlog[items] <- lapply(chlog[items],function(x) paste("<li>",substr(x,7,nchar(x)),"</li>",sep=""))
chlog <- gsub("\\\\section\\{Changes in version" ,"<h2 style='color:#222222'>Changes in version",chlog)
chlog <- gsub("\\}\\{" ,"</h2>",chlog)
chlog <- sub("^\\}","</ul>",chlog)
writeLines(chlog,"PMchangelog.html")
#build example datasets
#NPAG
if(buildData$npag){
setwd("~/LAPK/PmetricsSource/Test/NPAG")
file.copy(from=c("../src/model.txt","../src/ex.csv"),to=getwd(),overwrite=T)
NPrun(data="ex.csv",cycles=100,run=1,overwrite=T,intern=T)
PMload(1)
save(NPdata.1,final.1,cycle.1,op.1,cov.1,pop.1,post.1,mdata.1,file="~/LAPK/PmetricsSource/Pmetrics/data/PMex1.rda")
}
if(buildData$it2b){
#IT2B
setwd("~/LAPK/PmetricsSource/Test/IT2B")
file.copy(from=c("../src/model.txt","../src/ex.csv"),to=getwd(),overwrite=T)
ITrun(data="ex.csv",cycles=100,run=1,overwrite=T,intern=T)
PMload(1)
save(ITdata.1,final.1,cycle.1,op.1,cov.1,mdata.1,file="~/LAPK/PmetricsSource/Pmetrics/data/PMex2.rda")
}
if(buildData$baddata){
setwd("~/LAPK/PmetricsSource/Test")
badData <- PMreadMatrix("src/ex_bad.csv")
save(badData,file="~/LAPK/PmetricsSource/Pmetrics/data/PMex3.rda")
}
setwd("~/LAPK/PmetricsSource")
if(check) check("Pmetrics")
if(build){
build("Pmetrics",binary=T)
build("Pmetrics",binary=F)
}
install("Pmetrics")
#copy to repository
setwd("~/LAPK/PmetricsSource")
Rvers <- paste(version$major,substr(version$minor,1,1),sep=".")
#tar.gz
tools::write_PACKAGES(type="source")
file.remove(Sys.glob("Repos/src/contrib/Pmetrics*.tar.gz"))
file.copy(from=Sys.glob("Pmetrics*.tar.gz"),to="Repos/src/contrib")
file.copy(from=Sys.glob("Pmetrics*.tar.gz"),to="Archived")
file.copy(from="PACKAGES",to="Repos/src/contrib",overwrite=T)
file.remove(Sys.glob("Pmetrics*.tar.gz"))
#tgz
tools::write_PACKAGES(type="mac.binary")
macBinDir <- paste("Repos/bin/macosx/contrib/",Rvers,sep="")
if(!file.exists(macBinDir)){
dir.create(macBinDir)
}
file.remove(Sys.glob(paste(macBinDir,"Pmetrics*.tgz",sep="/")))
file.copy(from=Sys.glob("Pmetrics*.tgz"),to=macBinDir)
file.copy(from=Sys.glob("Pmetrics*.tgz"),to="Archived")
file.copy(from="PACKAGES",to=macBinDir,overwrite=T)
mavBinDir <- paste("Repos/bin/macosx/mavericks/contrib/",Rvers,sep="")
if(!file.exists(mavBinDir)){
dir.create(mavBinDir)
}
file.remove(Sys.glob(paste(mavBinDir,"Pmetrics*.tgz",sep="/")))
file.copy(from=Sys.glob("Pmetrics*.tgz"),to=mavBinDir)
file.copy(from="PACKAGES",to=mavBinDir,overwrite=T)
file.remove(Sys.glob("Pmetrics*.tgz"))
} else {  #this is for Windows
#do this for all changes
setwd("C:/LAPK/PmetricsSource")
if(build) build("Pmetrics",binary=T)
#copy to repository
setwd("C:/LAPK/PmetricsSource")
Rvers <- paste(version$major,substr(version$minor,1,1),sep=".")
#zip
tools::write_PACKAGES(type="win.binary")
winBinDir <- paste("Y:/LAPK/PmetricsSource/Repos/bin/windows/contrib/",Rvers,sep="")
if(!file.exists(winBinDir)){
dir.create(winBinDir)
}
file.remove(Sys.glob(paste(winBinDir,"Pmetrics*.zip",sep="/")))
file.copy(from=Sys.glob("Pmetrics*.zip"),to=winBinDir)
file.copy(from=Sys.glob("Pmetrics*.zip"),to="Y:/LAPK/PmetricsSource/Archived")
file.copy(from="PACKAGES",to=winBinDir,overwrite=T)
file.remove(Sys.glob("Pmetrics*.zip"))
}
setwd(wd)
}
makePmetrics(fortranChange=T,build=T,pdf=F,check=F,
buildData=list(npag=F,it2b=F,baddata=F),
ITver=114,NPver=120,SIMver="114",DOPTver=7,MBver=1)
R.Version()
makePmetrics <- function(fortranChange=F,build=T,pdf=F,check=F,buildData=NULL,parallel=T,
ITver,NPver,SIMver,DOPTver,MBver){
wd <- getwd()
require(devtools)
OS <- switch(.Platform$OS.type,unix=1,windows=2)
if(OS==1){
#do this only if fortran files have changed
if(fortranChange==T){
#remove old files
system("rm ~/LAPK/PmetricsSource/Pmetrics/inst/code/*.f")
setwd("~/LAPK/PmetricsSource/Source")
#copy source files to inst/code
system(paste("cat ./IT2B/prep/*.* > ../Pmetrics/inst/code/ITprep_",ITver,".f",sep=""))
system(paste("cat ./IT2B/error/*.* > ../Pmetrics/inst/code/ITerr_",ITver,".f",sep=""))
system(paste("cat ./IT2B/engine/*.* > ../Pmetrics/inst/code/ITeng_",ITver,".f",sep=""))
system(paste("cat ./NPAG/prep/*.* > ../Pmetrics/inst/code/NPprep_",NPver,".f",sep=""))
system(paste("cat ./NPAG/engine/*.* > ../Pmetrics/inst/code/NPeng_",NPver,".f",sep=""))
file.copy(from=paste("./Simulator/engine/MONT",SIMver,".FOR",sep=""),to=paste("../Pmetrics/inst/code/SIMeng_",SIMver,".f",sep=""),overwrite=T)
system(paste("cat ./DOPT/prep/*.* > ../Pmetrics/inst/code/DOprep_",DOPTver,".f",sep=""))
system(paste("cat ./DOPT/engine/*.* > ../Pmetrics/inst/code/DOeng_",DOPTver,".f",sep=""))
system(paste("cat ./MB2CSV/*.* > ../Pmetrics/inst/code/mb2csv_",MBver,".f",sep=""))
#remove comment lines and clean up
rmComm <- function(files){
for (i in files){
system(paste("~/LAPK/PmetricsSource/Source/win2mac.sa",i))
file.remove(i)
file.rename("newfile.txt",i)
code <- readLines(i)
commLines <- grep("^C",code,ignore.case=T)
commLines2 <- grep("^\\*",code)
#these are for parallel coding
commLines3 <- grep("^![^\\$]",code)
if(length(commLines3)>0 & parallel==F){
allcomments <- c(commLines,commLines2,commLines3)
}else{allcomments <- c(commLines,commLines2)}
if(length(allcomments)>0) code <- code[-allcomments]
code <- code[code!=""]
writeLines(code,i,sep="\r\n")
}
}
setwd("~/LAPK/PmetricsSource/Pmetrics/inst/code")
rmComm(files=list.files())
setwd("~/LAPK/PmetricsSource/Pmetrics/inst/config")
writeLines("1","newFort.txt")
} else {
setwd("~/LAPK/PmetricsSource/Pmetrics/inst/config")
writeLines("0","newFort.txt")
}
#do this for all changes
setwd("~/LAPK/PmetricsSource")
document("Pmetrics")
if(pdf){
file.remove("./Pmetrics/inst/doc/Pmetrics-manual.pdf")
system("R CMD Rd2pdf --output=./Pmetrics/inst/doc/Pmetrics-manual.pdf --no-preview ./Pmetrics/man")
}
#write html changelog file
chlog <- readLines("Pmetrics/inst/NEWS.Rd")
delLines <- which(chlog=="")
chlog <- chlog[-delLines]
chlog <- chlog[-1]
chlog <- gsub("\\\\subsection\\{NEW FEATURES\\}\\{" ,"<h3>NEW FEATURES</h3>",chlog)
chlog <- gsub("\\\\subsection\\{BUG FIXES\\}\\{" ,"<h3>BUG FIXES</h3>",chlog)
chlog <- gsub("\\\\itemize\\{","<ul>",chlog)
items <- grep("\\\\item",chlog)
chlog[items] <- lapply(chlog[items],function(x) paste("<li>",substr(x,7,nchar(x)),"</li>",sep=""))
chlog <- gsub("\\\\section\\{Changes in version" ,"<h2 style='color:#222222'>Changes in version",chlog)
chlog <- gsub("\\}\\{" ,"</h2>",chlog)
chlog <- sub("^\\}","</ul>",chlog)
writeLines(chlog,"PMchangelog.html")
#build example datasets
#NPAG
if(buildData$npag){
setwd("~/LAPK/PmetricsSource/Test/NPAG")
file.copy(from=c("../src/model.txt","../src/ex.csv"),to=getwd(),overwrite=T)
NPrun(data="ex.csv",cycles=100,run=1,overwrite=T,intern=T)
PMload(1)
save(NPdata.1,final.1,cycle.1,op.1,cov.1,pop.1,post.1,mdata.1,file="~/LAPK/PmetricsSource/Pmetrics/data/PMex1.rda")
}
if(buildData$it2b){
#IT2B
setwd("~/LAPK/PmetricsSource/Test/IT2B")
file.copy(from=c("../src/model.txt","../src/ex.csv"),to=getwd(),overwrite=T)
ITrun(data="ex.csv",cycles=100,run=1,overwrite=T,intern=T)
PMload(1)
save(ITdata.1,final.1,cycle.1,op.1,cov.1,mdata.1,file="~/LAPK/PmetricsSource/Pmetrics/data/PMex2.rda")
}
if(buildData$baddata){
setwd("~/LAPK/PmetricsSource/Test")
badData <- PMreadMatrix("src/ex_bad.csv")
save(badData,file="~/LAPK/PmetricsSource/Pmetrics/data/PMex3.rda")
}
setwd("~/LAPK/PmetricsSource")
if(check) check("Pmetrics")
if(build){
build("Pmetrics",binary=T)
build("Pmetrics",binary=F)
}
install("Pmetrics")
#copy to repository
setwd("~/LAPK/PmetricsSource")
Rvers <- paste(version$major,substr(version$minor,1,1),sep=".")
#tar.gz
tools::write_PACKAGES(type="source")
file.remove(Sys.glob("Repos/src/contrib/Pmetrics*.tar.gz"))
file.copy(from=Sys.glob("Pmetrics*.tar.gz"),to="Repos/src/contrib")
file.copy(from=Sys.glob("Pmetrics*.tar.gz"),to="Archived")
file.copy(from="PACKAGES",to="Repos/src/contrib",overwrite=T)
file.remove(Sys.glob("Pmetrics*.tar.gz"))
#tgz
tools::write_PACKAGES(type="mac.binary")
macBinDir <- paste("Repos/bin/macosx/contrib/",Rvers,sep="")
if(!file.exists(macBinDir)){
dir.create(macBinDir)
}
file.remove(Sys.glob(paste(macBinDir,"Pmetrics*.tgz",sep="/")))
file.copy(from=Sys.glob("Pmetrics*.tgz"),to=macBinDir)
file.copy(from=Sys.glob("Pmetrics*.tgz"),to="Archived")
file.copy(from="PACKAGES",to=macBinDir,overwrite=T)
mavBinDir <- paste("Repos/bin/macosx/mavericks/contrib/",Rvers,sep="")
if(!file.exists(mavBinDir)){
dir.create(mavBinDir)
}
file.remove(Sys.glob(paste(mavBinDir,"Pmetrics*.tgz",sep="/")))
file.copy(from=Sys.glob("Pmetrics*.tgz"),to=mavBinDir)
file.copy(from="PACKAGES",to=mavBinDir,overwrite=T)
file.remove(Sys.glob("Pmetrics*.tgz"))
} else {  #this is for Windows
#do this for all changes
setwd("C:/LAPK/PmetricsSource")
if(build) build("Pmetrics",binary=T)
#copy to repository
setwd("C:/LAPK/PmetricsSource")
Rvers <- paste(version$major,substr(version$minor,1,1),sep=".")
#zip
tools::write_PACKAGES(type="win.binary")
winBinDir <- paste("Y:/LAPK/PmetricsSource/Repos/bin/windows/contrib/",Rvers,sep="")
if(!file.exists(winBinDir)){
dir.create(winBinDir)
}
file.remove(Sys.glob(paste(winBinDir,"Pmetrics*.zip",sep="/")))
file.copy(from=Sys.glob("Pmetrics*.zip"),to=winBinDir)
file.copy(from=Sys.glob("Pmetrics*.zip"),to="Y:/LAPK/PmetricsSource/Archived")
file.copy(from="PACKAGES",to=winBinDir,overwrite=T)
file.remove(Sys.glob("Pmetrics*.zip"))
}
setwd(wd)
}
makePmetrics(fortranChange=T,build=T,pdf=F,check=F,
buildData=list(npag=F,it2b=F,baddata=F),
ITver=114,NPver=120,SIMver="114",DOPTver=7,MBver=1)
setwd("~/LAPK/PmetricsSource/Test/NPAG")
runApp("plot")
?selectInput
