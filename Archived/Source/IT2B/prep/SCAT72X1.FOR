C  SCAT72X1.FOR                                       11-21-10

C  SCAT72X1 HAS THE FOLLOWING CHANGE FROM SCAT72X:

C  A CALL TO SUBROUTINE PAUSE (WHICH IS IN THE NEW MAIN MODULE,
C  NPBG15E3.FOR) REPLACES EACH PAUSE STATEMENT. THIS IS BECAUSE A PAUSE
C  STATEMENT CAUSES A WARNING WHEN THE PROGRAM IS COMPILED AND LINKED
C  USING gfortran (AND IT FORCES THE USER TO TYPE "go" INSTEAD OF SIMPLY
C  HITTING THE ENTER KEY).

C-----------------------------------------------------------------------

C  SCAT72X.FOR							4-27-04

C  SCAT72X IS THE NON-PLOT VERSION OF SCAT72. I.E., IT STILL DOES THE
C  CALCULATIONS (PREDICTED VALUES, BIASES, ETC.) IN BOTH ROUTINES,
C  SCATPLOT AND SCATGRAM.

C  NOTE THAT IN SUBROUTINES GOFT AND INTEG, THE IMPLICIT REAL*8 
C  STATEMENT HAS BEEN MOVED TO RIGHT AFTER THE SUBROUTINE STATEMENT,
C  AS REQUIRED BY THE FORTRAN 90 COMPILER.

C  SCAT72X IS A PART OF THE FORTRAN 90 COMPILED AND LINED PROGRAM,
C  NPBIG10F1.FOR (AND SUBSEQUENT VERSIONS).

C-----------------------------------------------------------------------

C  SCAT72.FOR							8-23-02

C  SCAT72 HAS THE FOLLOWING CHANGES FROM SCAT71:

C  EXTRA ARGUMENTS, IERRMOD AND GAMLAM, ARE PASSED FROM THE CALLING
C  MODULE (1ST CALLING MODULE = NPBIG13.FOR/SUBROUTINE PREVRUN) TO 
C  SUBROUTINE SCATPLOT, AND THESE VALUE ARE USED TO ESTABLISH THE ASSAY 
C  S.D.'S.

C-----------------------------------------------------------------------

C  SCAT71.FOR							11-24-01

C  SCAT71 HAS A "BUG" CORRECTION TO SCAT7.FOR. IN SUBROUTINE SCATGRAM,
C  IF N = 2, PREVIOUSLY, THE CALC. OF SE WOULD CAUSE THE PROGRAM TO 
C  BOMB WITH A DIVIDE BY 0 ERROR. NOW, SE IS NOT CALC. UNLESS N .GE. 3.
C  IN ADDITION, SEVERAL OTHER PARTS OF THE CODE WHICH ARE INAPPROPRIATE
C  UNLESS N .GE. 3 ARE AVOIDED.

C-----------------------------------------------------------------------

C  SCAT7.FOR							1-31-01

C  SCAT7 HAS A COUPLE OF I/O CHANGES FROM SCAT6 REGARDING THE 
C  REPORTING OF PRECISION.

C-----------------------------------------------------------------------

C  SCAT6.FOR							1-10-01

C  SCAT6 HAS ONE ADDITION TO SCAT5. A NEW MEASURE OF PRECISION,
C  (BIAS-ADJUSTED) PRECISION WILL BE CALCULATED AND DISPLAYED. THIS
C  NEW PRECISION IS THE STANDARD DEFINITION OF PRECISION. IT SUBTRACTS
C  OUT THE EFFECT OF THE BIAS FROM THE SUM OF SQUARES OF DIFFERENCES
C  BETWEEN X AND Y. SIMILARLY, A (BIAS-ADJUSTED) WEIGHTED PRECISION WILL
C  SUBTRACT OUT THE BIAS FROM THE OLD WEIGHTED SUM OF SQUARES OF 
C  DIFFERENCES BETWEEN X AND Y.

C-----------------------------------------------------------------------

C  SCAT5.FOR							12-21-00

C  SCAT5 HAS THE FOLLOWING CHANGE FROM SCAT5. SUBROUTINE SCATGRAM
C  HAS AN ADDITIONAL ARGUMENT, IPUT, WHICH INDICATES WHETHER OR NOT
C  CALCULATED VALUES ARE TO BE WRITTEN INTO THE OUTPUT FILE 35.

C-----------------------------------------------------------------------

C  SCAT4.FOR							3-31-00

C  SCAT4 HAS THE FOLLOWING CHANGE TO SCAT3:

C  THE 95% CONFIDENCE LINES FOR THE SCATGRAM PLOT WILL NO LONGER 
C  ALWAYS BE FOR E(Y|X) AS IN SCAT3. INSTEAD, IT WILL BE FOR E(Y|X) IF
C  ICONF = 1 (ICONF IS ADDED TO THE ARGUMENT LIST FOR SUBROUTINE
C  SCATGRAM), AND FOR Y|X IF ICONF = 0. NOTE THAT THE TITLE OF THE
C  PLOT WILL REFLECT WHICH CASE (ICONF = 1 OR 0) IT IS.

C  ALSO, IN SUBROUTINE SCATGRAM, ADDITIONAL STATISTICS WILL BE 
C  OUTPUT ... 99%, 95%, AND 80% C.I. FOR E(Y|X) IF ICONF = 1, OR 
C  Y|X IF ICONF = 0.

C-----------------------------------------------------------------------

C  SCAT3.FOR							2-16-00

C  SCAT3 IS AN EXTENSION TO SCAT2. IN SUBROUTINE SCATGRAM, THE 95% C.I. 
C  LINES ARE ADDED TO THE REGRESSION LINE.

C  AND FORMATS 14 HAVE I3 REPLACED BY I7.


 	SUBROUTINE SCATPLOT(IMETH,ICENTER,IOUT,IQUAL,JSUB,IPUT,N,X,Y,
     1  C0,C1,C2,C3,AMIN,AMAX,ISCALE,IERRMOD,GAMLAM)

	IMPLICIT REAL*8(A-H,O-Z)
	DIMENSION COEFF(999,5)
        REAL X(150000),Y(150000)
	REAL XMIN,XMAX,YMIN,YMAX,XX(200),YY(200),AMIN,AMAX
	CHARACTER CHARSUB*3,TIT*70,XLAB*59
	COMMON/TOSCAT/MAXSER,MINSER,SERMEN,SERSD,COEFF
	COMMON/BEEP/IBEEP

C  INPUT ARE:

C  IMETH = 1 IF X VALUES ARE BASED ON POPULATION MEAN, MEDIAN, OR MODE
C	     VALUES FROM THE LAST CYCLE (USED FOR BOTH PROGRAMS, 
C	     MXEM1S__.FOR AND MXEM2N__.FOR).
C	 = 2 IF X VALUES ARE BASED ON INDIVIDUAL SUBJECT VALUES (WHICH
C	     THEMSELVES WERE CALCULATED BASED ON EITHER THE POPULATION
C	     MEAN OR MEDIAN VALUES FROM THE LAST CYCLE). (USED ONLY FOR
C	     PROGRAM MXEM1S__.FOR).
C        = 3 IF X VALUES ARE BASED ON INDIVIDUAL SUBJECT VALUES (EITHER
C	     THE FINAL CYCLE MEANS, MEDIANS, OR MODES FROM EACH 
C 	     SUBJECT'S FINAL CYCLE POSTERIOR DENSITY). (USED ONLY FOR
C	     PROGRAM MXEM2N__.FOR).

C  ICENTER = 1 IF ABOVE X VALUES USED MEAN VALUES (SEE
C	       EXPLANATION IN MXEM1S__.FOR/MAIN AND MXEM2N__.FOR/MAIN).
C          = 2 IF ABOVE X VALUES USED MEDIAN VALUES.
C          = 3 IF ABOVE X VALUES USED MODE VALUES (ONLY APPLICABLE FOR
C	       MXEM2N__.FOR).
 
C  JSUB = SUBJECT NO. HAVING ABOVE X AND Y VALUES, IF JSUB > 0.
C         IF JSUB < 0, JSUB = -NSUB, AND THE X AND Y VALUES ARE FOR 
C         THE ENTIRE POPULATION.

C  IPUT = 1 IF REGRESSION STATISTICS ARE TO BE PUT INTO THE OUTPUT FILE.
C       = 0 OTHERWISE.
C  IOUT = 1 MEANS GRAPH GOES TO THE SCREEN.
C       = 0 MEANS GRAPH GOES TO THE PRINTER.
C  IQUAL = 1 FOR BEST PRINT QUALITY;
C        = 3 FOR LOWER PRINT QUALITY, BUT FASTER SPEED.
C  N = NO. OF VALUES IN EACH OF THE VECTORS X AND Y.
C  X,Y = VECTORS DESCRIBED ABOVE.
C  C0,C1,C2,C3 = ASSAY ERROR NOISE COEFFICIENTS, IF JSUB > 0;
C		 IF JSUB < 0, THESE VALUES ARE NOT APPLICABLE; IN THIS
C		 CASE, THE C'S ARE INPUT IN MATRIX COEFF (SEE BELOW).

C  IF ISCALE = 1:
C  	[AMIN,AMAX] = LOWER AND UPPER BOUNDS FOR THE SCALES ON EACH AXIS 
C	              THE SCATTERPLOT.
C  IF ISCALE = 0: [AMIN, AMAX] ARE NOT INPUT, BUT ARE CALCULATED BY THE
C		  PROGRAM (AND THEN RETURNED TO THE CALLING PROGRAM).

C  IERRMOD AND GAMLAM = VALUES TO ESTABLISH THE ASSAY S.D.

C  IBEEP = 1 IF THE BELL IS TO BE SUPPRESSED AFTER PLOT GOES TO SCREEN.

C  IF JSUB < 0, VIA COMMON/TOSCAT:
C		MAXSER,MINSER,SERMEN,SERSD ARE STATISTICS FOR THE NO. 
C		OF SERUM LEVELS FOR THE ENTIRE POPULATION OF SUBJECTS.
C		COEFF = MATRIX CONTAINING [C0,C1,C2,C3] FOR EACH OF THE
C			SUBJECTS.


C  OUTPUT ARE:

C  STATISTICS AND SCATTERPLOT DESCRIBED ABOVE.



C-----------------------------------------------------------------------



C  SCAT2.FOR							1-10-00

C  SCAT2 HAS THE FOLLOWING CHANGE FROM SCAT1:

C  SUBROUTINE SCATGRAM HAS AN EXTRA ARGUMENT, ILOWER, WHICH TELLS THAT
C  ROUTINE WHETHER TO SET EACH LOWER AXIS BOUNDARY TO 0 OR TO A VALUE 
C  ESSENTIALLY EQUAL TO THE LOWER LIMIT OF THE RESPECTIVE VALUES BEING 
C  PLOTTED.

C-----------------------------------------------------------------------

C  SCAT1.FOR							12-31-99

C  SCAT1 CONTAINS SCTPL12A.FOR AND A NEW SUBROUTINE, SCATGRAM.
C  SCATGRAM IS USED BY THE POPULATION PROGRAM TO PLOT SCATTERGRAMS OF
C  ONE COVARIATE/R.V. AGAINST ANOTHER. IT WILL USE SIMILAR LOGIC TO
C  MUCH OF THE CODE IN SUBROUTINE SCATPLOT.

C  THIS MODULE IS USED FIRST WITH NPLIT3.FOR.

C-----------------------------------------------------------------------

C  SEE SCTPL12A.FOR CODE FOR COMMENTS ON PREVIOUS PROGRAMS.

C-----------------------------------------------------------------------


C  INDICATE TO FILE 31, IF IPUT=1, WHICH TYPE OF PARAMETER VALUES
C  RESULTED IN THE FOLLOWING PREDICTED VALUES.

	IF(IPUT .EQ. 1) THEN

	WRITE(31,2)
    2   FORMAT(//' THE FOLLOWING RESULTS ARE FOR PREDICTED VALUES'/
     1' WHICH WERE GENERATED BY PARAMETER VALUES EQUAL TO ')

	IF(IMETH .EQ. 1 .AND. ICENTER .EQ. 1) THEN
	WRITE(31,*)' FINAL CYCLE POPULATION MEANS.'
	WRITE(31,*)
	ENDIF

	IF(IMETH .EQ. 1 .AND. ICENTER .EQ. 2) THEN
	WRITE(31,*)' FINAL CYCLE POPULATION MEDIANS.'
	WRITE(31,*)
	ENDIF

	IF(IMETH .EQ. 1 .AND. ICENTER .EQ. 3) THEN
	WRITE(31,*)' FINAL CYCLE POPULATION MODES.'
	WRITE(31,*)
	ENDIF

C  NOTE: IMETH=2 --> MXEM1S__.FOR PROGRAM ONLY, SO ICENTER=3 IS NOT 
C  POSSIBLE.

	IF(IMETH .EQ. 2 .AND. ICENTER .EQ. 1) THEN
	WRITE(31,*)' INDIVIDUAL POSTERIOR PARAMETER VALUES BASED ON '
	WRITE(31,*)' POPULATION MEANS.'
	WRITE(31,*)
	ENDIF

	IF(IMETH .EQ. 2 .AND. ICENTER .EQ. 2) THEN
	WRITE(31,*)' INDIVIDUAL POSTERIOR PARAMETER VALUES BASED ON'
	WRITE(31,*)' POPULATION MEDIANS.'
	WRITE(31,*)
	ENDIF


C  NOTE: IMETH=3 --> MXEM2N__.FOR PROGRAM ONLY.

	IF(IMETH .EQ. 3 .AND. ICENTER .EQ. 1) THEN
	WRITE(31,*)' PARAMETER MEANS FROM INDIVIDUAL POSTERIOR'
	WRITE(31,*)' DISTRIBUTIONS.'
	WRITE(31,*)
	ENDIF

	IF(IMETH .EQ. 3 .AND. ICENTER .EQ. 2) THEN
	WRITE(31,*)' PARAMETER MEDIANS FROM INDIVIDUAL POSTERIOR'
	WRITE(31,*)' DISTRIBUTIONS.'
	WRITE(31,*)
	ENDIF

	IF(IMETH .EQ. 3 .AND. ICENTER .EQ. 3) THEN
	WRITE(31,*)' PARAMETER MODES FROM INDIVIDUAL POSTERIOR'
	WRITE(31,*)' DISTRIBUTIONS.'
	WRITE(31,*)
	ENDIF

	ENDIF

C  THE ABOVE ENDIF IS FOR THE  IF(IPUT .EQ. 1)  CONDITION.

C  IF N=0, REPORT THIS TO THE USER AND RETURN.

	IF(N .EQ. 0) THEN
	 WRITE(*,*)' THERE ARE NO OBSERVATIONS TO PLOT. '
	 WRITE(*,*)
	 CALL PAUSE
	 RETURN
	ENDIF


C  CALCULATE A AND B WHERE THE LEAST SQUARES LINE IS  Y = A + B*X.

	SUMX=0.D0
	SUMY=0.D0
	SUMXX=0.D0
	SUMYY=0.D0
	SUMXY=0.D0

	DO I=1,N
	 SUMX=SUMX+X(I)
	 SUMY=SUMY+Y(I)
	 SUMXX=SUMXX+X(I)*X(I)
	 SUMYY=SUMYY+Y(I)*Y(I)
	 SUMXY=SUMXY+X(I)*Y(I)
	END DO

	XBAR = SUMX/N
	YBAR = SUMY/N
	SXX = SUMXX - N*XBAR*XBAR
	SYY = SUMYY - N*YBAR*YBAR
	SXY = SUMXY - N*XBAR*YBAR

C  NOTE, BELOW, THAT A SPECIAL CASE OF SXX=SYY=0 OCCURS IF N=1.
C  SET IREG = 1. IF IT IS RESET = 0 BELOW, NO REGRESSION LINE CAN
C  BE FOUND.

	IREG = 1

	IF(SXX .EQ. 0.D0) THEN

	 IF(JSUB .GT. 0) WRITE(*,17) JSUB
   17    FORMAT(/' ALL PREDICTED VALUES ARE THE SAME --> NO REGRESSION'/
     1' LINE STATISTICS FOR SUBJECT NO. ',I4,/)
	 IF(IPUT .EQ. 1 .AND. JSUB .GT. 0) WRITE(31,17) JSUB

	 IF(JSUB .LT. 0) WRITE(*,177) 
  177    FORMAT(/' ALL PREDICTED VALUES ARE THE SAME --> NO REGRESSION'/
     1' LINE STATISTICS FOR THE POPULATION. '/)
	 IF(IPUT .EQ. 1 .AND. JSUB .LT. 0) WRITE(31,177) 

	 CALL PAUSE
	 IREG=0
	 GO TO 10

	ENDIF

	IF(SYY .EQ. 0.D0) THEN

	 IF(JSUB .GT. 0) WRITE(*,18) JSUB
   18    FORMAT(/' ALL OBSERVED VALUES ARE THE SAME --> NO REGRESSION'/
     1' LINE STATISTICS FOR SUBJECT NO. ',I4,/)
	 IF(IPUT .EQ. 1 .AND. JSUB .GT. 0) WRITE(31,18) JSUB

	 IF(JSUB .LT. 0) WRITE(*,188) 
  188    FORMAT(/' ALL OBSERVED VALUES ARE THE SAME --> NO REGRESSION'/
     1' LINE STATISTICS FOR FOR THE POPULATION.'/)
	 IF(IPUT .EQ. 1 .AND. JSUB .LT. 0) WRITE(31,188) 

	 CALL PAUSE
	 IREG=0
	 GO TO 10
	ENDIF

	B = SXY/SXX
	A = YBAR - B*XBAR
	RSQUAR = B*B*SXX/SYY
	R = DSQRT(RSQUAR)

   10   CONTINUE

	IF(JSUB .LT. 0) WRITE(*,11) -JSUB
   11   FORMAT(//' FOR THE ENTIRE POPULATION OF ',I3,' SUBJECTS: ')
	IF(JSUB .GE. 1) WRITE(*,12) JSUB
   12   FORMAT(//' FOR SUBJECT NO. ',I4,': ')

	CALL PAUSE

	IF(IREG	.EQ. 1) THEN
	 WRITE(*,13) 
   13    FORMAT(/' THE BEST LEAST SQUARES LINE IS  YOBS = A + B*YPRED,'/
     1' WHERE A AND B ARE: ')
	 WRITE(*,*) A,B
	 WRITE(*,*)' R-SQUARED = ',RSQUAR,'     R = ',R
  	ENDIF

	IF(JSUB .LT. 0 .AND. IPUT .EQ. 1) WRITE(31,11) -JSUB
	IF(JSUB .GE. 1 .AND. IPUT .EQ. 1) WRITE(31,12) JSUB

	IF(IREG .EQ. 1) THEN
	 IF(IPUT .EQ. 1) WRITE(31,13) 
	 IF(IPUT .EQ. 1) WRITE(31,*) A,B
	 IF(IPUT .EQ. 1) WRITE(31,*)' R-SQUARED = ',RSQUAR,'     R = ',R
	ENDIF


C  NOTE THAT IF N=2, RSQUAR SHOULD = 1.0, BUT BECAUSE OF NUMERICAL
C  ROUNDOFF, IT MAY NOT. THEREFORE, TEST SPECIFICALLY FOR N=2 BECAUSE
C  N=2 -->  DF=0 --> PROGRAM WILL BOMB IF SUBROUTINE TDIST IS CALLED.
C  ... ALSO, SINCE THIS SUBROUTINE DOESN'T END NOW IF SXX OR SYY = 0
C  (I.E., IREG = 0, IN WHICH CASE RSQUAR IS NOT CALCULATED - SEE ABOVE), 
C  MAKE IREG=1 ANOTHER REQUIREMENT TO DO THE FOLLOWING CODE.

	IF(RSQUAR .NE. 1.D0 .AND. N .NE. 2 .AND. IREG .EQ. 1) THEN

	 FACT = (N - 2.D0)/(1.D0 - RSQUAR)
	 T = R*DSQRT(FACT)
	 WRITE(*,14) T,N-2

   14    FORMAT(' ',' T = ',F10.5,' ... DEG. OF FREEDOM = ',I7)
	 IF(IPUT .EQ. 1) WRITE(31,14) T,N-2

C  CALL TDIST TO GET P-VALUE ASSOCIATED WITH THIS T-VALUE AND THE
C  ASSOCIATED DEGREES OF FREEDOM.

	DF = N-2.D0
	CALL TDIST(DF,T,P)

C  IN CASE, BY NUMERICAL INTEGRATION APPROXIMATION ERROR, P RETURNS
C  .GT. 1.0, SET IT = 1.0.

	IF(P .GT. 1.D0) P=1.D0

	PVALUE=1.D0-P

	IF(PVALUE .GT. 5.D-10) THEN
	 WRITE(*,16) PVALUE
	 IF(IPUT .EQ. 1) WRITE(31,16) PVALUE
   16   FORMAT(' ',' THE ASSOCIATED P-VALUE IS ',F11.9/)
	ENDIF

	IF(PVALUE .LE. 5.D-10 .AND. PVALUE .GE. 1.D-300) THEN
	 WRITE(*,21) PVALUE
	 IF(IPUT .EQ. 1) WRITE(31,21) PVALUE
   21   FORMAT(' ',' THE ASSOCIATED P-VALUE IS ',G16.9/)
	ENDIF

	IF(PVALUE .LT. 1.D-300) THEN
	 WRITE(*,22)
	 IF(IPUT .EQ. 1) WRITE(31,22)
   22    FORMAT(' ',' THE ASSOCIATED P-VALUE IS LESS THAN 10 TO THE '/
     1' POWER OF -300.'/)
	ENDIF

	CALL PAUSE

	ENDIF

C  THE ABOVE ENDIF IS FOR THE  	
C     IF(RSQUAR .NE. 1.D0 .AND. N .NE. 2 .AND. IREG .EQ. 1)  
C  CONDITION.


C  OUTPUT STATISTICS FOR NO. OF SERUM LEVELS IF JSUB .LT. 0.

	IF(JSUB .LT. 0) THEN

	WRITE(*,32) -JSUB
   32   FORMAT(' ','NO. OF SERUM LEVELS -- STATISTICS OVER ALL ',I3,' SU
     1BJECTS: ')
	WRITE(*,33) N,SERMEN,MAXSER,MINSER,SERSD
   33   FORMAT(' ',' TOTAL = ',I4,'  MEAN = ',F6.2,'  MAX = ',I3,'  MIN 
     1= ',I3,'  S.D. = ',F6.2)
	IF(IPUT .EQ. 1) WRITE(31,32) -JSUB
	IF(IPUT .EQ. 1) WRITE(31,33) N,SERMEN,MAXSER,MINSER,SERSD

	ENDIF


C  IF IPUT .EQ. 1:
C  PUT INTO FILE 31 A TABLE OF P(I), O(I), (P(I)-O(I)), AND 
C  (P(I)-O(I))^2, WHERE P(I)=X(I)=ITH PRED VALUE AND 
C  O(I)=Y(I)=ITH OBSERVED VALUE.

C  PUT IN MEASURES OF BIAS AND PRECISION TO SCREEN (AND FILE 31 IF 
C  IPUT=1).

	IF(IPUT .EQ. 1) WRITE(31,71)
   71 FORMAT(//'   PREDICTED    OBSERVED   PRED.-OBS.   (PRED.-OBS.)^2'/
     1'   ---------    --------   ----------   --------------')

	SUMD=0.0
	SUMDS=0.D0
	SUMWD=0.D0
	SUMWDS=0.D0

C  IF JSUB .LT 0:

C   THIS CALL TO SCATPLOT IS FOR THE ENTIRE POPULATION.
C   IN THIS CASE, EACH SUBJECT'S OBSERVATIONS MUST USE THE ASSAY
C   NOISE COEFFICIENTS FOR THAT SUBJECT. THIS INFO IS IN MATRIX
C   COEFF (INPUT VIA COMMON/TOSCAT):

C   COEFF(I,1) = NO. OF OBSERVATIONS FOR SUBJECT I, I=1,NSUB
C   COEFF(I,2:5) = [C0,C1,C2,C3] FOR SUBJECT I, I=1,NSUB.
C		   NSUB NOT NEEDED IN THIS ROUTINE.

C   NNOW, ISUB, AND NOBSER ARE USED TO ASSIGN THE CORRECT C'S TO EACH
C   SUBJECT'S OBSERVATIONS.

	 NNOW = 0
	 ISUB = 0	
	 NOBSER = 0

	DO I=1,N
	 D = X(I)-Y(I)
	 DS = D*D
	 SUMD = SUMD + D
	 SUMDS = SUMDS + DS
	 YI = Y(I)

	 IF(JSUB .LT. 0) THEN

	  NNOW = NNOW+1	

	  IF(NNOW .GT. NOBSER) THEN
	   NNOW = 1
	   ISUB = ISUB + 1 
	   NOBSER = COEFF(ISUB,1)
	   C0 = COEFF(ISUB,2)
	   C1 = COEFF(ISUB,3)
	   C2 = COEFF(ISUB,4)
	   C3 = COEFF(ISUB,5)
	  ENDIF

	ENDIF

C  ESTABLISH THE ASSAY S.D., WHICH DEPENDS NOT JUST ON THE C'S, BUT
C  ALSO IERRMOD AND GAMLAM (SEE COMMENTS IN NPBIG13.FOR/bignpaglam3.f).

	 SDI1 = C0 + C1*YI + C2*YI*YI + C3*YI**3
	 IF(IERRMOD .EQ. 1) SDI = SDI1
	 IF(IERRMOD .EQ. 2) SDI = SDI1*GAMLAM
	 IF(IERRMOD .EQ. 3) SDI = DSQRT(SDI1*SDI1 + GAMLAM*GAMLAM)
	 IF(IERRMOD .EQ. 4) SDI = GAMLAM


	 SUMWD = SUMWD + D/SDI
	 SUMWDS = SUMWDS + (D/SDI)**2
	 IF(IPUT .EQ. 1) WRITE(31,72) X(I),Y(I),D,DS
	END DO

   72   FORMAT(3X,3(F9.4,3X),F12.4)

	WRITE(*,23)
   23   FORMAT(/' MEASURES OF BIAS: ')
	WRITE(*,24) SUMD/N
   24   FORMAT('  MEAN ERROR (PRED. - OBS.) = ',F15.6)
	WRITE(*,26) SUMWD/N
   26   FORMAT('  MEAN WEIGHTED ERROR (PRED. - OBS.) = ',F15.6)
	WRITE(*,27)
   27   FORMAT(/' MEASURES OF PRECISION: ')
	WRITE(*,28) SUMDS/N
   28   FORMAT('  MEAN SQUARED ERROR (PRED. - OBS.) = ',F15.6)
	WRITE(*,281) SUMDS/N - (SUMD/N)**2.D0
  281   FORMAT('  BIAS-ADJUSTED MEAN SQUARED ERROR = ',F15.6)
	WRITE(*,29) SUMWDS/N
   29   FORMAT('  MEAN WEIGHTED SQUARED ERROR (PRED. - OBS.) = ',F15.6)
	WRITE(*,291) SUMWDS/N - (SUMWD/N)**2.D0
  291   FORMAT('  BIAS-ADJUSTED MEAN WEIGHTED SQUARED ERROR = ',F15.6)


	IF(IPUT .EQ. 1) THEN
	 WRITE(31,*)
	 WRITE(31,23)
	 WRITE(31,24) SUMD/N
	 WRITE(31,26) SUMWD/N
	 WRITE(31,27)
	 WRITE(31,28) SUMDS/N
	 WRITE(31,281) SUMDS/N - (SUMD/N)**2.D0
	 WRITE(31,29) SUMWDS/N
	 WRITE(31,291) SUMWDS/N - (SUMWD/N)**2.D0
	ENDIF


C***********************************************************************

C  USE INTERACTOR TO PLOT THE LEAST SQUARES LINE AND THE SCATTERPLOT,
C  IF IREG=1, BUT JUST THE SCATTERPLOT IF IREG=0.

C  IN SCAT72X.FOR, THE INTERACTOR CALLS HAVE BEEN REMOVED.


	RETURN
	END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	SUBROUTINE TDIST(DF,U,P)
	IMPLICIT REAL*8(A-H,O-Z)
	COMMON/TOSUB/IR
	EXTERNAL GOFT

C  TDIST, CALLED BY MAIN, CALCULATES THE VALUES IN THE T-DISTRIBUTION.  
C  THE DEGREES OF FREEDOM (R), AND U ARE INPUT.  OUTPUT IS THE AMOUNT 
C  (PROPORTION) OF PROBABILITY TO THE LEFT OF U, FOR THAT PARTICULAR 
C  T-DISTRIBUTION.

C  CONVERT DEGREES OF FREEDOM TO AN INTEGER. ALSO, HARDCODE THE NO. OF
C  INTEGRATION INTERVALS TO BE 1000 (THIS WORKS WELL FOR ALL CASES I'VE
C  TESTED.

	IR=DF
	N=1000

C  CALCULATE GAMMA((IR+1)/2)/GAMMA(IR/2). CALL IT GAMRAT.

	CALL CALCGAM(GAMRAT)


C  INTEG IS THE ROUTINE WHICH CONTROLS THE NUMERICAL INTEGRATION
C  PROCESS.  IT CALLS THE SUPPLIED SUBROUTINE (THE 3RD ARGUMENT) THE
C  APPROPRIATE NO. OF TIMES AND ADDS THE FUNCTIONAL VALUES--IN THE
C  APPROPRIATE WEIGHTED FASHION--TO GET THE REQUIRED ESTIMATE FOR THE
C  INTEGRAL.

C  DEL IS ONE-HALF THE INTERVAL SIZE USED FOR THE T-DIST SUBROUTINE, 
C  GOFT.

      DEL=U/N/2.D0

      CALL INTEG(N,DEL,GOFT,VALUE)

C  GOFT IS THE SUBROUTINE WHICH CALCS. G(T)=1/(1+T**2/R)**((R+1)/2) FOR
C  EACH T REQUIRED BY THE NUMERICAL INTEGRATION ROUTINE, INTEG.  VALUE
C  IS THE DEFINITE INTEGRAL OF G(T) FROM 0 TO U.

      P = .5D0 + GAMRAT*VALUE/DSQRT(3.14159D0*IR)

      RETURN
      END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	SUBROUTINE CALCGAM(GAMRAT)
	IMPLICIT REAL*8(A-H,O-Z)
	COMMON/TOSUB/IR

C  THIS ROUTINE, CALLED BY MAIN, CALCULATES GAMRAT, THE RATIO OF TWO 
C  GAMMA FUNCTIONS, THE TOP, EVALUATED AT (IR+1)/2, AND THE BOTTOM 
C  EVALUATED AT IR/2. NOTE THAT IF IR IS 'LARGE', EACH OF THE GAMMA 
C  FUNCTIONS JUST DESCRIBED IS 'VERY LARGE' (PERHAPS SO LARGE AS TO 
C  RESULT IN A NUMERICAL OVERFLOW IF CALCULATED SEPARATELY), BUT THE 
C  RATIO IS NOT. BECAUSE THIS RATIO IS CALCULATED IN PIECES, THERE IS NO
C  PROBLEM WITH NUMERICAL OVERFLOW.

C  THERE ARE 5 CASES TO CONSIDER IN CALCULATING GAMRAT ...
C  SEE 5/31/95 NOTES FOR TDIST.FOR IN MY PERSONAL FORTRAN NOTES.

	SQRTPI = 1.77245385090552

	IF(IR .EQ. 1) GAMRAT = 1.D0/SQRTPI
	IF(IR .EQ. 2) GAMRAT = SQRTPI/2.D0
	IF(IR .EQ. 3) GAMRAT = 2.D0/SQRTPI

	IF(IR .LE. 3) RETURN

C  FIND GAMRAT USING THE FOLLOWING CODE IF IR IS EVEN AND .GE. 4.

	IHALF=IR/2
	IH2 = IHALF*2

C  NOTE THAT IH2 = IR IF AND ONLY IF IR IS EVEN.

	IF(IH2 .EQ. IR) THEN

	FACT = SQRTPI/2.D0

	DO I=1,IHALF-1
	 FACT = FACT*(2.D0*I+1.D0)/2.D0/I
	END DO

	GAMRAT = FACT
	RETURN

	ENDIF


C  TO REACH THIS PART OF THE CODE, IR MUST BE ODD AND .GE. 5.

	FACT = 2.D0/SQRTPI

	DO I=1,(IR-3)/2
	 FACT = FACT*(2.D0*I+2.D0)/(2.D0*I+1.D0)
	END DO

	GAMRAT = FACT

	RETURN
	END	
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      	SUBROUTINE GOFT(ARG,OUT)
	IMPLICIT REAL*8(A-H,O-Z)
      	COMMON /TOSUB/ IR

      EX=-(IR+1.D0)/2.D0
      OUT=(1.D0+ARG*ARG/IR)**EX
      RETURN
      END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	SUBROUTINE INTEG(N,D,FUNC,RSLT)
	IMPLICIT REAL*8(A-H,O-Z)
        EXTERNAL FUNC

C  THIS ROUTINE INPUTS D=(DELTA T)/2, AND FUNC, THE NAME OF THE ROUTINE
C  WHICH GIVES THE FUNCTION TO BE INTEGRATED FROM 0 TO 2*N*D, USING N
C  INTERVALS.  2N+1 FUNCTION EVALUATIONS ARE REQUIRED.
C
C  1ST, OBTAIN FUNCTION VALUES AT THE ENDPOINTS, 0 & B=2*N*D.
C
      CALL FUNC(0.D0,V1)
      B=2.D0*N*D
      CALL FUNC(B,V2)
      SUM=V1+V2
C
C  THERE ARE 2N-1 MORE FUNCTION VALUES TO BE FOUND...AT D,2D,3D,...,
C  (2N-1)D.  THE ODD NO. ONES WILL BE MULTIPLIED BY 4, AND THE EVEN
C  NO. ONES BY 2.
C
      IFAC=4
      DO 10 I=1,2*N-1
      ARGMNT=I*D
      CALL FUNC(ARGMNT,V)
      SUM=SUM+V*IFAC
      IFAC=IFAC/2
      IF(IFAC .EQ. 1) IFAC=4
   10 CONTINUE
      RSLT=D*SUM/3.D0
      RETURN
      END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	SUBROUTINE GETCHAR(JSUB,CHARSUB)
	CHARACTER CHARSUB*3
	CHARACTER*1 B,C,D

C  THIS ROUTINE, CALLED BY MAIN, INPUTS THE INTEGER JSUB
C  (BETWEEN 1 AND 999), AND OUTPUTS THE 3-CHARACTER EQUIVALENT, CHARSUB.

	ILEFT = JSUB
	I3 = ILEFT/100
	ILEFT = ILEFT - I3*100
	I2 = ILEFT/10
 	ILEFT = ILEFT - I2*10
	I1 = ILEFT

C  CONVERT THIS TO THE CHARACTER EQUIVALENT. 

	IF(I3 .EQ. 1) B='1'
	IF(I3 .EQ. 2) B='2'
	IF(I3 .EQ. 3) B='3'
	IF(I3 .EQ. 4) B='4'
	IF(I3 .EQ. 5) B='5'
	IF(I3 .EQ. 6) B='6'
	IF(I3 .EQ. 7) B='7'
	IF(I3 .EQ. 8) B='8'
	IF(I3 .EQ. 9) B='9'
	IF(I3 .EQ. 0) B='0'

	IF(I2 .EQ. 1) C='1'
	IF(I2 .EQ. 2) C='2'
	IF(I2 .EQ. 3) C='3'
	IF(I2 .EQ. 4) C='4'
	IF(I2 .EQ. 5) C='5'
	IF(I2 .EQ. 6) C='6'
	IF(I2 .EQ. 7) C='7'
	IF(I2 .EQ. 8) C='8'
	IF(I2 .EQ. 9) C='9'
	IF(I2 .EQ. 0) C='0'

	IF(I1 .EQ. 1) D='1'
	IF(I1 .EQ. 2) D='2'
	IF(I1 .EQ. 3) D='3'
	IF(I1 .EQ. 4) D='4'
	IF(I1 .EQ. 5) D='5'
	IF(I1 .EQ. 6) D='6'
	IF(I1 .EQ. 7) D='7'
	IF(I1 .EQ. 8) D='8'
	IF(I1 .EQ. 9) D='9'
	IF(I1 .EQ. 0) D='0'


	CHARSUB = B//C//D

	RETURN
	END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	SUBROUTINE SCATGRAM(IOUT,IQUAL,N,XLABEL,YLABEL,XLABEL2,YLABEL2,
     1  X,Y,ILOWER,ICONF,IPUT)

C  THIS ROUTINE IS CALLED BY MAIN AND EITHER PREVRUN (NPEM) OR EXTRAOPT
C  (IT2B) TO PRINT A SCATTERGRAM OF THE N PAIR OF VALUES IN X AND Y. 

	IMPLICIT REAL*8(A-H,O-Z)
        REAL X(999),Y(999)
	REAL XMIN,XMAX,YMIN,YMAX,XX(200),YY(200),AMIN,AMAX,
     1  YYU(200),YYL(200)
	CHARACTER CHARSUB*3,TIT*70,XLAB*59,YLAB*59
	CHARACTER XLABEL*20,YLABEL*20,XLABEL2*10,YLABEL2*10
	COMMON/BEEP/IBEEP


C  INPUT ARE:

C  N = NO. OF VALUES IN EACH OF X AND Y, THE VARIABLES WHOSE
C         SCATTERGRAM IS TO BE PLOTTED.

C  XLABEL2 + XLABEL = COMBINED LABEL TO BE USED ON X-AXIS.
C  YLABEL2 + YLABEL = COMBINED LABEL TO BE USED ON Y-AXIS.

C  IOUT = 1 MEANS GRAPH GOES TO THE SCREEN.
C       = 0 MEANS GRAPH GOES TO THE PRINTER.
C  IQUAL = 1 FOR BEST PRINT QUALITY;
C        = 3 FOR LOWER PRINT QUALITY, BUT FASTER SPEED.

C  ILOWER = 0 IF EACH AXIS BOUNDARY IS SURE TO INCLUDE 0;
C           1 IF EACH AXIS BOUNDARY IS SET ESSENTIALLY EQUAL TO THE
C	      LOWER LIMIT OF THE VALUES BEING PLOTTED.

C  ICONF = 1 IF THE 95% CONFIDENCE LINES FOR THE SCATGRAM PLOT WILL BE
C            FOR E(Y|X);
C          0 IF THE 95% CONFIDENCE LINES FOR THE SCATGRAM PLOT WILL BE
C	     FOR Y|X.

C  IPUT = 1 IF CALCULATED VALUES ARE TO BE WRITTEN TO FILE 35;
C         0 IF CALCULATED VALUES ARE NOT TO BE WRITTEN TO FILE 35.

C  IBEEP = 1 IF THE BELL IS TO BE SUPPRESSED AFTER PLOT GOES TO SCREEN.


C  OUTPUT ARE:

C  STATISTICS AND SCATTERPLOT DESCRIBED ABOVE.
 
	IF(IPUT .EQ. 1)	WRITE(35,2) YLABEL2, YLABEL, XLABEL2, XLABEL,N
    2   FORMAT(//' THE FOLLOWING RESULTS ARE FOR THE LINEAR REGRESSION'/
     1' LINE OF ',A10,1X,A20,' AS A FUNCTION OF '/
     2' ',A10,1X,A20/
     2' ... OVER ALL ',I4,' SUBJECT(S). ')

C  IF N=0, REPORT THIS TO THE USER AND RETURN.

	IF(N .EQ. 0) THEN
	 WRITE(*,*)' THERE ARE NO VALUES TO PLOT. '
	 WRITE(*,*)
	 CALL PAUSE
	 RETURN
	ENDIF


C  CALCULATE A AND B WHERE THE LEAST SQUARES LINE IS  Y = A + B*X.

	SUMX=0.D0
	SUMY=0.D0
	SUMXX=0.D0
	SUMYY=0.D0
	SUMXY=0.D0

	DO I=1,N
	 SUMX=SUMX+X(I)
	 SUMY=SUMY+Y(I)
	 SUMXX=SUMXX+X(I)*X(I)
	 SUMYY=SUMYY+Y(I)*Y(I)
	 SUMXY=SUMXY+X(I)*Y(I)
	END DO

	XBAR = SUMX/N
	YBAR = SUMY/N
	SXX = SUMXX - N*XBAR*XBAR
	SYY = SUMYY - N*YBAR*YBAR
	SXY = SUMXY - N*XBAR*YBAR

C  NOTE, BELOW, THAT A SPECIAL CASE OF SXX=SYY=0 OCCURS IF N=1.
C  SET IREG = 1. IF IT IS RESET = 0 BELOW, NO REGRESSION LINE CAN
C  BE FOUND.

	IREG = 1

	IF(SXX .EQ. 0.D0) THEN
	 WRITE(*,17)  XLABEL2,XLABEL, N
	 IF(IPUT .EQ. 1) WRITE(35,17) XLABEL2,XLABEL, N
   17    FORMAT(/' ALL THE VALUES FOR ',A10,1X,A20/
     1' ARE THE SAME ACROSS ALL ',I4,' SUBJECT(S).'//
     2' THERE WILL BE NO REGRESSION LINE STATISTICS. '/)
	 IREG=0
	 GO TO 10
	ENDIF

	IF(SYY .EQ. 0.D0) THEN
	 WRITE(*,17)  YLABEL2,YLABEL, N
	 IF(IPUT .EQ. 1) WRITE(35,17) YLABEL2,YLABEL, N
	 IREG=0
	 GO TO 10
	ENDIF

	B = SXY/SXX
	A = YBAR - B*XBAR
	RSQUAR = B*B*SXX/SYY
	R = DSQRT(RSQUAR)

C  SE IS THE STANDARD ERROR OF THE ESTIMATE, WHICH IS THE SQUARE ROOT 
C  OF THE "AVERAGE" SQUARED ERROR. SE CAN BE CALCULATED AS SHOWN BELOW
C  (SEE HOME NOTES, 2-10-00, AND SCHAUM'S OUTLINE, AND 2-11-00 NOTES FOR
C  THIS PROGRAM).

C  AS OF SCAT71.FOR, A "BUG" IS CORRECTED. SE CANNOT BE CALCULATED IF 
C  N = 2. SO PUT IN THE REQUIREMENT THAT N .GE. 3 TO CALC. SE.

	IF(N .GE. 3) SE = DSQRT(SYY*(1.D0 - RSQUAR)/(N - 2.D0))

   10   CONTINUE

	IF(IREG	.EQ. 1) THEN
	 CALL SYSTEM('CLS')
	 WRITE(*,13) 
   13    FORMAT(/' THE BEST LEAST SQUARES LINE IS  Y = A + B*X,'/
     1' WHERE A AND B ARE: ')
	 WRITE(*,*) A,B
	 WRITE(*,*)' R-SQUARED = ',RSQUAR,'     R = ',R
	  IF(IPUT .EQ. 1) THEN
	   WRITE(35,13) 
	   WRITE(35,*) A,B
	   WRITE(35,*)' R-SQUARED = ',RSQUAR,'     R = ',R
	  ENDIF
	ENDIF


C  NOTE THAT IF N=2, RSQUAR SHOULD = 1.0, BUT BECAUSE OF NUMERICAL
C  ROUNDOFF, IT MAY NOT. THEREFORE, TEST SPECIFICALLY FOR N=2 BECAUSE
C  N=2 -->  DF=0 --> PROGRAM WILL BOMB IF SUBROUTINE TDIST IS CALLED.
C  ... ALSO, SINCE THIS SUBROUTINE DOESN'T END NOW IF SXX OR SYY = 0
C  (I.E., IREG = 0, IN WHICH CASE RSQUAR IS NOT CALCULATED - SEE ABOVE), 
C  MAKE IREG=1 ANOTHER REQUIREMENT TO DO THE FOLLOWING CODE.

	IF(RSQUAR .NE. 1.D0 .AND. N .NE. 2 .AND. IREG .EQ. 1) THEN

	 FACT = (N - 2.D0)/(1.D0 - RSQUAR)
	 T = R*DSQRT(FACT)
	 WRITE(*,14) T,N-2

   14    FORMAT(' ',' T = ',F10.5,' ... DEG. OF FREEDOM = ',I7)
	 IF(IPUT .EQ. 1) WRITE(35,14) T,N-2

C  CALL TDIST TO GET P-VALUE ASSOCIATED WITH THIS T-VALUE AND THE
C  ASSOCIATED DEGREES OF FREEDOM.

	DF = N-2.D0
	CALL TDIST(DF,T,P)

C  IN CASE, BY NUMERICAL INTEGRATION APPROXIMATION ERROR, P RETURNS
C  .GT. 1.0, SET IT = 1.0.

	IF(P .GT. 1.D0) P=1.D0

	PVALUE=1.D0-P

	IF(PVALUE .GT. 5.D-10) THEN
	 WRITE(*,16) PVALUE
	 IF(IPUT .EQ. 1) WRITE(35,16) PVALUE
   16   FORMAT(' ',' THE ASSOCIATED P-VALUE IS ',F11.9/)
	ENDIF

	IF(PVALUE .LE. 5.D-10 .AND. PVALUE .GE. 1.D-300) THEN
	 WRITE(*,21) PVALUE
	 IF(IPUT .EQ. 1) WRITE(35,21) PVALUE
   21   FORMAT(' ',' THE ASSOCIATED P-VALUE IS ',G16.9/)
	ENDIF

	IF(PVALUE .LT. 1.D-300) THEN
	 WRITE(*,22)
	 IF(IPUT .EQ. 1) WRITE(35,22)
   22    FORMAT(' ',' THE ASSOCIATED P-VALUE IS LESS THAN 10 TO THE '/
     1' POWER OF -300.'/)
	ENDIF

C  WRITE THE 99%, 95%, AND 80% C.I. FOR EITHER THE EXPECTED VALUE OF Y 
C  GIVEN X = 0 (IF ICONF = 1), OR FOR AN ADDITIONAL VALUE OF Y GIVEN 
C  X = 0 (IF ICONF = 0). SEE HOME NOTES 2/10/00.

C  A 99% C.I. REQUIRES THE T VALUE ASSOCIATED WITH .995% OF THE 
C  DISTRIBUTION TO ITS LEFT. CALL SUBROUTINE GETT995 TO GET THIS T, 
C  T995. SIMILARLY, CALL GETT975 TO GET T975, AND GETT900 TO GET T900.

	 CALL GETT995(DF,T995)
	 CALL GETT975(DF,T975)
	 CALL GETT900(DF,T900)

	 IF(ICONF .EQ. 1) PAREN = 1.D0/N + XBAR*XBAR/SXX
	 IF(ICONF .EQ. 0) PAREN = 1.D0 + 1.D0/N + XBAR*XBAR/SXX
	 DELTA1 = SE*DSQRT(PAREN)
	 YINT = A
	 YUP1 = A + T900*DELTA1
	 YDN1 = A - T900*DELTA1
	 YUP2 = A + T975*DELTA1
	 YDN2 = A - T975*DELTA1
	 YUP3 = A + T995*DELTA1
	 YDN3 = A - T995*DELTA1

	 IF(ICONF .EQ. 1) THEN
	  WRITE(*,101)
	  IF(IPUT .EQ. 1) WRITE(35,101)
	 ENDIF
  101    FORMAT(/' FOR THIS CASE (THE EXPECTED VALUE OF Y GIVEN X), AT X
     1 = 0:')

	 IF(ICONF .EQ. 0) THEN
	  WRITE(*,102)
	  IF(IPUT .EQ. 1) WRITE(35,102)
	 ENDIF
  102    FORMAT(/' FOR THIS CASE (AN ADDITIONAL VALUE OF Y GIVEN X), AT 
     1X = 0:')

	 WRITE(*,107) YINT
	 IF(IPUT .EQ. 1) WRITE(35,107) YINT
  107    FORMAT(' THE POINT ESTIMATE IS ',G11.4)
	 
	 WRITE(*,103) YDN3,YUP3
	 IF(IPUT .EQ. 1) WRITE(35,103) YDN3,YUP3
  103    FORMAT('  A 99% CONFIDENCE INTERVAL IS [',G11.4,', ',G11.4,']')

	 WRITE(*,104) YDN2,YUP2
	 IF(IPUT .EQ. 1) WRITE(35,104) YDN2,YUP2
  104    FORMAT('  A 95% CONFIDENCE INTERVAL IS [',G11.4,', ',G11.4,']')

	 WRITE(*,106) YDN1,YUP1
	 IF(IPUT .EQ. 1) WRITE(35,106) YDN1,YUP1
  106    FORMAT(' AN 80% CONFIDENCE INTERVAL IS [',G11.4,', ',G11.4,']')


	ENDIF

C  THE ABOVE ENDIF IS FOR THE  	
C     IF(RSQUAR .NE. 1.D0 .AND. N .NE. 2 .AND. IREG .EQ. 1)  
C  CONDITION.


C***********************************************************************

C  USE INTERACTOR TO PLOT THE LEAST SQUARES LINE AND THE SCATTERPLOT,
C  (AND THE 95% C.I. LINES) IF IREG=1, BUT JUST THE SCATTERPLOT IF 
C  IREG=0.

C  IN SCAT72X.FOR, THE INTERACTOR CALLS HAVE BEEN REMOVED.


	RETURN
	END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	SUBROUTINE GETT975(DF,T975)
	IMPLICIT REAL*8(A-H,O-Z)
	DIMENSION TVAL(34)
	DATA (TVAL(K),K=1,34)/12.71,4.30,3.18,2.78,2.57,2.45,2.36,2.31,
     1   2.26,2.23,2.20,2.18,2.16,2.14,2.13,2.12,2.11,2.10,2.09,2.09,
     2   2.08,2.07,2.07,2.06,2.06,2.06,2.05,2.05,2.04,2.04,2.02,2.00,
     3   1.98,1.96/


C  GETT IS CALLED BY SCATGRAM TO RETURN THE T-VALUE FROM A
C  T-DISTRIBUTION WITH DEGREES OF FREEDOM = DF WHICH HAS 97.5% OF THE
C  DISTRIBUTION TO THE LEFT OF IT.

C  NOTE THAT TVAL(K) IS THE T VALUE ASSOCIATED WITH 97.5% OF THE DIST.
C  BEING TO ITS LEFT FOR A T-DIST WITH K DEG. OF FREEDOM, FOR K=1,30;
C  ALSO TVAL(31) IS THE ABOVE .975 T-VALUE FOR DF = 40;
C       TVAL(32) IS THE ABOVE .975 T-VALUE FOR DF = 60;
C       TVAL(33) IS THE ABOVE .975 T-VALUE FOR DF = 120;
C       TVAL(34) IS THE ABOVE .975 T-VALUE FOR DF = infinity.

C  THE ABOVE T-VALUES COME FROM SCHAUM'S OUTLINE.


C  TO OBTAIN T975:

C  IF IDF = DF IS BETWEEN 1 AND 30, T975 = TVAL(IDF);
C  IF IDF > 30 AND < 40, T975 = TVAL(30);
C  IF IDF .GE. 40 AND < 60, T975 = TVAL(31);
C  IF IDF .GE. 60 AND < 120, T975 = TVAL(32);
C  IF IDF .GE. 120 AND < 500, T975 = TVAL(33);
C  IF IDF .GE. 500 T975 = TVAL(34).

C  NOTE THAT THE RULES FOR IDF > 30 --> THE VALUE USED FOR T975 IS AT
C  LEAST AS BIG AS THE TRUE VALUE (SINCE HIGHER DEG. OF FREEDOM -->
C  LOWER TVAL VALUE) ... EXCEPT THAT 500 IS AN ARBITRARY DEGREES OF
C  FREEDOM AT WHICH THE T VALUE FOR INFINITY WILL START BEING USED
C  (I.E., AT DF = 500, THE T VALUE FOR INFINITY, 1.96, IS PROBABLY 
C  CLOSER TO THE TRUE VALUE THAN THE T VALUE FOR 120, 1.98).

	IDF = DF
	IF(IDF .GE. 1 .AND. IDF .LE. 30) T975 = TVAL(IDF)
	IF(IDF .GT. 30 .AND. IDF .LT. 40) T975 = TVAL(30)
	IF(IDF .GE. 40 .AND. IDF .LT. 60) T975 = TVAL(31)
	IF(IDF .GE. 60 .AND. IDF .LT. 120) T975 = TVAL(32)
	IF(IDF .GE. 120 .AND. IDF .LT. 500) T975 = TVAL(33)
	IF(IDF .GE. 500) T975 = TVAL(34)

	RETURN
	END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	SUBROUTINE GETT995(DF,T995)
	IMPLICIT REAL*8(A-H,O-Z)
	DIMENSION TVAL(34)
	DATA (TVAL(K),K=1,34)/63.66,9.92,5.84,4.60,4.03,3.71,3.50,3.36,
     1   3.25,3.17,3.11,3.06,3.01,2.98,2.95,2.92,2.90,2.88,2.86,2.84,
     2   2.83,2.82,2.81,2.80,2.79,2.78,2.77,2.76,2.76,2.75,2.70,2.66,
     3   2.62,2.58/


C  GETT IS CALLED BY SCATGRAM TO RETURN THE T-VALUE FROM A
C  T-DISTRIBUTION WITH DEGREES OF FREEDOM = DF WHICH HAS 99.5% OF THE
C  DISTRIBUTION TO THE LEFT OF IT.

C  NOTE THAT TVAL(K) IS THE T VALUE ASSOCIATED WITH 99.5% OF THE DIST.
C  BEING TO ITS LEFT FOR A T-DIST WITH K DEG. OF FREEDOM, FOR K=1,30;
C  ALSO TVAL(31) IS THE ABOVE .975 T-VALUE FOR DF = 40;
C       TVAL(32) IS THE ABOVE .975 T-VALUE FOR DF = 60;
C       TVAL(33) IS THE ABOVE .975 T-VALUE FOR DF = 120;
C       TVAL(34) IS THE ABOVE .975 T-VALUE FOR DF = infinity.

C  THE ABOVE T-VALUES COME FROM SCHAUM'S OUTLINE.


C  TO OBTAIN T995:

C  IF IDF = DF IS BETWEEN 1 AND 30, T995 = TVAL(IDF);
C  IF IDF > 30 AND < 40, T995 = TVAL(30);
C  IF IDF .GE. 40 AND < 60, T995 = TVAL(31);
C  IF IDF .GE. 60 AND < 120, T995 = TVAL(32);
C  IF IDF .GE. 120 AND < 500, T995 = TVAL(33);
C  IF IDF .GE. 500 T995 = TVAL(34).

C  NOTE THAT THE RULES FOR IDF > 30 --> THE VALUE USED FOR T995 IS AT
C  LEAST AS BIG AS THE TRUE VALUE (SINCE HIGHER DEG. OF FREEDOM -->
C  LOWER TVAL VALUE) ... EXCEPT THAT 500 IS AN ARBITRARY DEGREES OF
C  FREEDOM AT WHICH THE T VALUE FOR INFINITY WILL START BEING USED
C  (I.E., AT DF = 500, THE T VALUE FOR INFINITY, 2.58, IS PROBABLY 
C  CLOSER TO THE TRUE VALUE THAN THE T VALUE FOR 120, 2.62).

	IDF = DF
	IF(IDF .GE. 1 .AND. IDF .LE. 30) T995 = TVAL(IDF)
	IF(IDF .GT. 30 .AND. IDF .LT. 40) T995 = TVAL(30)
	IF(IDF .GE. 40 .AND. IDF .LT. 60) T995 = TVAL(31)
	IF(IDF .GE. 60 .AND. IDF .LT. 120) T995 = TVAL(32)
	IF(IDF .GE. 120 .AND. IDF .LT. 500) T995 = TVAL(33)
	IF(IDF .GE. 500) T995 = TVAL(34)

	RETURN
	END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	SUBROUTINE GETT900(DF,T900)
	IMPLICIT REAL*8(A-H,O-Z)
	DIMENSION TVAL(34)
	DATA (TVAL(K),K=1,34)/ 3.08,1.89,1.64,1.53,1.48,1.44,1.42,1.40,
     1   1.38,1.37,1.36,1.36,1.35,1.34,1.34,1.34,1.33,1.33,1.33,1.32,
     2   1.32,1.32,1.32,1.32,1.32,1.32,1.31,1.31,1.31,1.31,1.30,1.30,
     3   1.29,1.28/


C  GETT IS CALLED BY SCATGRAM TO RETURN THE T-VALUE FROM A
C  T-DISTRIBUTION WITH DEGREES OF FREEDOM = DF WHICH HAS 97.5% OF THE
C  DISTRIBUTION TO THE LEFT OF IT.

C  NOTE THAT TVAL(K) IS THE T VALUE ASSOCIATED WITH 97.5% OF THE DIST.
C  BEING TO ITS LEFT FOR A T-DIST WITH K DEG. OF FREEDOM, FOR K=1,30;
C  ALSO TVAL(31) IS THE ABOVE .900 T-VALUE FOR DF = 40;
C       TVAL(32) IS THE ABOVE .900 T-VALUE FOR DF = 60;
C       TVAL(33) IS THE ABOVE .900 T-VALUE FOR DF = 120;
C       TVAL(34) IS THE ABOVE .900 T-VALUE FOR DF = infinity.

C  THE ABOVE T-VALUES COME FROM SCHAUM'S OUTLINE.


C  TO OBTAIN T900:

C  IF IDF = DF IS BETWEEN 1 AND 30, T900 = TVAL(IDF);
C  IF IDF > 30 AND < 40, T900 = TVAL(30);
C  IF IDF .GE. 40 AND < 60, T900 = TVAL(31);
C  IF IDF .GE. 60 AND < 120, T900 = TVAL(32);
C  IF IDF .GE. 120 AND < 500, T900 = TVAL(33);
C  IF IDF .GE. 500 T900 = TVAL(34).

C  NOTE THAT THE RULES FOR IDF > 30 --> THE VALUE USED FOR T900 IS AT
C  LEAST AS BIG AS THE TRUE VALUE (SINCE HIGHER DEG. OF FREEDOM -->
C  LOWER TVAL VALUE) ... EXCEPT THAT 500 IS AN ARBITRARY DEGREES OF
C  FREEDOM AT WHICH THE T VALUE FOR INFINITY WILL START BEING USED
C  (I.E., AT DF = 500, THE T VALUE FOR INFINITY, 1.28, IS PROBABLY 
C  CLOSER TO THE TRUE VALUE THAN THE T VALUE FOR 120, 1.29).

	IDF = DF
	IF(IDF .GE. 1 .AND. IDF .LE. 30) T900 = TVAL(IDF)
	IF(IDF .GT. 30 .AND. IDF .LT. 40) T900 = TVAL(30)
	IF(IDF .GE. 40 .AND. IDF .LT. 60) T900 = TVAL(31)
	IF(IDF .GE. 60 .AND. IDF .LT. 120) T900 = TVAL(32)
	IF(IDF .GE. 120 .AND. IDF .LT. 500) T900 = TVAL(33)
	IF(IDF .GE. 500) T900 = TVAL(34)

	RETURN
	END

